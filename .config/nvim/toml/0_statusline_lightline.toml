# statusline
[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
  if !has('gui_running')
    set t_Co=256
  endif

  set laststatus=2
  "let g:lightline_colorscheme = 'PaperColor_light'
  "let g:lightline_colorscheme = '16color'
  "let g:lightline_colorscheme = 'OldHope'
  "let g:lightline_colorscheme = 'PaperColor'
  "let g:lightline_colorscheme = 'PaperColor_dark'
  "let g:lightline_colorscheme = 'PaperColor_light'
  "let g:lightline_colorscheme = 'Tomorrow'
  "let g:lightline_colorscheme = 'Tomorrow_Night'
  "let g:lightline_colorscheme = 'Tomorrow_Night_Blue'
  "let g:lightline_colorscheme = 'Tomorrow_Night_Bright'
  "let g:lightline_colorscheme = 'Tomorrow_Night_Eighties'
  "let g:lightline_colorscheme = 'ayu_mirage'
  "let g:lightline_colorscheme = 'darcula'
  "let g:lightline_colorscheme = 'default'
  "let g:lightline_colorscheme = 'deus'
  "let g:lightline_colorscheme = 'jellybeans'
  "let g:lightline_colorscheme = 'landscape'
  "let g:lightline_colorscheme = 'materia'
  "let g:lightline_colorscheme = 'material'
  "let g:lightline_colorscheme = 'molokai'
  "let g:lightline_colorscheme = 'nord'
  "let g:lightline_colorscheme = 'one'
  "let g:lightline_colorscheme = 'powerline'
  "let g:lightline_colorscheme = 'powerlineish'
  let g:lightline_colorscheme = 'selenized_dark'
  "let g:lightline_colorscheme = 'seoul256'
  "let g:lightline_colorscheme = 'solarized'
  "let g:lightline_colorscheme = 'srcery_drk'
  "let g:lightline_colorscheme = 'wombat'
  let g:lightline = {
    \  'colorscheme': g:lightline_colorscheme,
    \  'inactive': {
    \    'left': [ ['mode', 'paste'],
    \              ['readonly', 'filepath', 'anzu'],
    \              ['timeinfo']
    \            ],
    \   'right': [ [ 'lineinfo' ],
    \              [ 'gitrepoinfo', 'diff_base'],
    \              [ 'fileinfo']
    \            ]
    \  },
    \  'active': {
    \    'left': [ ['mode', 'paste'],
    \              ['readonly', 'filepath', 'anzu'],
    \              ['timeinfo']
    \            ],
    \   'right': [ [ 'lineinfo' ],
    \              [ 'gitrepoinfo', 'diff_base'],
    \              [ 'fileinfo']
    \            ]
    \  },
    \  'component': {
    \    'lineinfo': '%l[%L]:%v'
    \  },
    \  'mode_map': {
    \    'n': 'N',
    \    'i': 'I',
    \    'R': 'R',
    \    'v': 'V',
    \    'V': 'V',
    \    "\<C-v>": 'V',
    \    'c': 'C',
    \    's': 'S',
    \    'S': 'S',
    \    "\<C-s>": 'S',
    \    't': 'TERMINAL'
    \  },
    \  'component_function': {
    \     'anzu': 'anzu#search_status',
    \     'filepath': 'FPath',
    \     'diff_base': 'GitGutterDiffBase',
    \     'fileinfo': 'FileInfo',
    \     'cursorinfo': 'CursorInfo',
    \   }
    \ }

  function! FPath()
    " 文字列的に長いな、と思う場合はこちらを使用(ファイル名のみ表示する)
    " ファイル名のみ
    " let s:str = fnamemodify(expand("%:p"), ":t")

    " フルパス
    let s:str = substitute(expand("%:p"), $HOME, "~", "g")
    if &modified
      let s:str = s:str . '|+'
    endif
    return s:str
  endfunction

  " GitGutterの情報
  " 現在のHEADのmerge-baseにするブランチとそのコミットハッシュ
  function! GitGutterDiffBase()
    if g:my_git_repo == ""
      return ""
    endif
    " ex) '[Git(develop)]'[5] ==> 'develop)]'
    " ex) '[Git(develop)]'[5:-3] ==> 'develop'
    let s:curr_branch = fugitive#statusline()[5:-3]
    " 文字列的に長いので、少し簡略な表現で表示するようにする
    "return g:my_git_repo . '(' . g:my_diff_base_hash . ':' . g:my_diff_base_branch . ' <= ' . s:curr_branch . ')'
    return g:my_diff_base_branch . ' <= ' . s:curr_branch
  endfunction

  function! FileInfo()
    return &fileformat . '|' . &fileencoding . '|' . &filetype
  endfunction

  function! GitRepoInfo()
    return g:my_git_repo
  endfunction
'''


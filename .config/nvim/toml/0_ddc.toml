[[plugins]]
repo='Shougo/ddc.vim'
hook_add='''

" pum.vim {{{
call ddc#custom#patch_global('completionMenu', 'pum.vim')
inoremap <silent><expr> <TAB>
      \ pum#visible() ? '<Cmd>call pum#map#insert_relative(+1)<CR>' :
      \ (col('.') <= 1 <Bar><Bar> getline('.')[col('.') - 2] =~# '\s') ?
      \ '<TAB>' : ddc#manual_complete()
inoremap <Tab>   <Cmd>call pum#map#insert_relative(+1)<CR>
inoremap <S-Tab> <Cmd>call pum#map#insert_relative(-1)<CR>
inoremap <C-n>   <Cmd>call pum#map#insert_relative(+1)<CR>
inoremap <C-j>   <Cmd>call pum#map#insert_relative(+1)<CR>

inoremap <silent><expr> <Up>   pum#visible() ? '<Cmd>call pum#map#insert_relative(-1)<CR>' : '<Up>'
" inoremap <silent><expr> <Down>
"       \ pum#visible() ? '<Cmd>call pum#map#insert_relative(+1)<CR>' :
"       \ (col('.') <= 1 <Bar><Bar> getline('.')[col('.') - 2] =~# '\s') ?
"       \ '<Down>' : ddc#manual_complete()
inoremap <silent><expr> <Down> pum#visible() ? '<Cmd>call pum#map#insert_relative(+1)<CR>' : '<Down>'
" inoremap <silent><expr> <Up>
"       \ pum#visible() ? '<Cmd>call pum#map#insert_relative(-1)<CR>' :
"       \ (col('.') <= 1 <Bar><Bar> getline('.')[col('.') - 2] =~# '\s') ?
"       \ '<Up>' : ddc#manual_complete()

inoremap <C-p>   <Cmd>call pum#map#insert_relative(-1)<CR>
inoremap <C-k>   <Cmd>call pum#map#insert_relative(-1)<CR>
"inoremap <Down>   <Cmd>call pum#map#insert_relative(+1)<CR>
"inoremap <Up>   <Cmd>call pum#map#insert_relative(-1)<CR>
inoremap <C-y>   <Cmd>call pum#map#confirm()<CR>
inoremap <C-e>   <Cmd>call pum#map#cancel()<CR>
inoremap <PageDown> <Cmd>call pum#map#insert_relative_page(+1)<CR>
inoremap <PageUp>   <Cmd>call pum#map#insert_relative_page(-1)<CR>
nnoremap :       <Cmd>call DownPre()<CR>:

call ddc#custom#patch_global('autoCompleteEvents', [
    \ 'InsertEnter', 'TextChangedI', 'TextChangedP',
    \ 'CmdlineEnter', 'CmdlineChanged',
    \ ])
nnoremap :       <Cmd>call CommandlinePre()<CR>:
function! CommandlinePre() abort
  " Note: It disables default command line completion!
  cnoremap <expr> <Tab>
  \ pum#visible() ? '<Cmd>call pum#map#insert_relative(+1)<CR>' :
  \ ddc#manual_complete()
  cnoremap <S-Tab> <Cmd>call pum#map#insert_relative(-1)<CR>
  cnoremap <C-y>   <Cmd>call pum#map#confirm()<CR>
  cnoremap <C-e>   <Cmd>call pum#map#cancel()<CR>

  " Overwrite sources
  let s:prev_buffer_config = ddc#custom#get_buffer()
  call ddc#custom#patch_buffer('sources',
          \ ['cmdline', 'cmdline-history', 'around'])

  autocmd User DDCCmdlineLeave ++once call CommandlinePost()

  " Enable command line completion
  call ddc#enable_cmdline_completion()
  call ddc#enable()
endfunction
function! CommandlinePost() abort
  " Restore sources
  call ddc#custom#set_buffer(s:prev_buffer_config)
  cunmap <Tab>
endfunction
" }}}

call ddc#custom#patch_global('sourceOptions', {
      \ '_': {
      \   'matchers': ['matcher_head'],
      \   'sorters': ['sorter_rank']},
      \ })

" Change source options
" Customize global settings
call ddc#custom#patch_global('sources', [
      \ 'nvim-lsp',
      \ 'around',
      \ 'file',
      \ 'cmdline-history',
      \ 'look',
      \ ])

" ddc-cmdline-history
call ddc#custom#patch_global('sourceOptions', {
      \ 'cmdline-history': {'mark': 'ddc-cmdline-history'},
      \ })

" ddc-arround {{{
call ddc#custom#patch_global('sourceOptions', {
      \ 'around': {'mark': 'ddc-arround'},
      \ })
call ddc#custom#patch_global('sourceParams', {
      \ 'around': {'maxSize': 500},
      \ })
" }}}

" ddc-file {{{
call ddc#custom#patch_global('sourceOptions', {
      \ 'file': {
      \   'mark': 'ddc-file',
      \   'isVolatile': v:true,
      \   'forceCompletionPattern': '\S/\S*',
      \ }})
call ddc#custom#patch_filetype(
      \ ['ps1', 'dosbatch', 'autohotkey', 'registry'], {
      \ 'sourceOptions': {
      \   'file': {
      \     'forceCompletionPattern': '\S\\\S*',
      \   },
      \ },
      \ 'sourceParams': {
      \   'file': {
      \     'mode': 'win32',
      \   },
      \ }})
" }}}

" ddc-nvim-lsp {{{
call ddc#custom#patch_global('sourceOptions', {
      \ 'nvim-lsp': {
      \   'mark': 'ddc-nvim-lsp',
      \   'forceCompletionPattern': '\.\w*|:\w*|->\w*' },
      \ })

call ddc#custom#patch_global('sourceParams', {
      \ 'nvim-lsp': { 'kindLabels': { 'Class': 'c' } },
      \ })
" }}}

" cmp-look {{{
call ddc#custom#patch_global('sourceOptions', {
      \ 'look': {
      \   'converters': ['loud', 'matcher_head'],
      \   'matchers': [],
      \   'mark': 'look',
      \   'isVolatile': v:true,
      \ }})

call ddc#custom#patch_global('sourceParams', {
      \ 'look': {
      \   'convertCase': v:true,
      \   'dict': v:null
      \ }})
" }}}

"" ddc-mocword {{{
"call ddc#custom#patch_global('sourceOptions', {
"      \ 'mocword': {
"      \   'mark': 'mocword',
"      \   'minAutoCompleteLength': 3,
"      \   'isVolatile': v:true,
"      \ }})
" }}}

" <TAB>: completion.
inoremap <silent><expr> <TAB>
\ ddc#map#pum_visible() ? '<C-n>' :
\ (col('.') <= 1 <Bar><Bar> getline('.')[col('.') - 2] =~# '\s') ?
\ '<TAB>' : ddc#map#manual_complete()

" <S-TAB>: completion back.
inoremap <expr><S-TAB>  ddc#map#pum_visible() ? '<C-p>' : '<C-h>'

" Use ddc.
call ddc#enable()
'''

# DenoでVimプラグインを開発するためのプラグイン
[[plugins]]
repo='vim-denops/denops.vim'
# ポップアップウィンドウを表示するプラグイン
[[plugins]]
repo='Shougo/pum.vim'
hook_add='''
'''

# カーソル周辺の既出単語を補完するsource
[[plugins]]
repo='Shougo/ddc-around'

# ファイル名を補完するsource
[[plugins]]
repo='Shougo/ddc-file'

[[plugins]]
repo='Shougo/ddc-nvim-lsp'

#[[plugins]]
#repo='Shougo/ddc-mocword'

# 入力中の単語を補完の対象にするfilter
[[plugins]]
repo='Shougo/ddc-matcher_head'
# 補完候補を適切にソートするfilter
[[plugins]]
repo='Shougo/ddc-sorter_rank'
# 補完候補の重複を防ぐためのfilter
[[plugins]]
repo='Shougo/ddc-converter_remove_overlap'

[[plugins]]
repo='mattn/vim-lsp-settings'
[[plugins]]
repo='prabirshrestha/vim-lsp'

[[plugins]]
repo='neovim/nvim-lspconfig'
hook_add='''
lua << EOF
local nvim_lsp = require('lspconfig')
local servers = { 'solargraph', 'tsserver' }
for _, lsp in ipairs(servers) do
  nvim_lsp[lsp].setup {
    flags = {
      debounce_text_changes = 150,
      },
    settings = {
      solargraph = {
        diagnostics = false
      }
    }
  }
end
EOF
'''

[[plugins]]
repo='Shougo/ddc-cmdline-history'
[[plugins]]
repo = 'Shougo/neco-vim'
[[plugins]]
repo = 'octaltree/cmp-look'

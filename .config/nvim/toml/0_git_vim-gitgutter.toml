[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
  set signcolumn=yes
  " 変更マーク
  let g:gitgutter_sign_added              = '+'
  let g:gitgutter_sign_modified           = '~'
  let g:gitgutter_sign_removed            = 'X'
  let g:gitgutter_sign_removed_first_line = '_^'
  let g:gitgutter_sign_modified_removed   = '~R'

  " 変更マークのハイライト
  hi SignColumn guibg=none
  hi GitGutterAdd           guifg=#00ff33 guibg=#004433 " an added line
  hi GitGutterChange        guifg=#aaaa00 guibg=#666600 " a changed line
  hi GitGutterDelete        guifg=#666666 guibg=#000000 " at least one removed line
  hi GitGutterChangeDelete  guifg=#666666 guibg=#000000 " a changed line followed by at least one removed line

  " 行ハイライトは結構見にくいと感じたので、コメントアウト
  "" 起動時に差分行の行ハイライトを自動的に有効にする
  "" let g:gitgutter_highlight_lines = 1

  " git diff元ブランチの候補一覧
  let s:my_diff_base_list = ['origin/develop', 'origin/master']

  " 何かバッファを開いたら、gitgutterのサイン表示に利用するgitの比較元ハッシュを更新する
  autocmd BufEnter * call s:UpdateMergeBase(s:my_diff_base_list)
  function! s:UpdateMergeBase(diff_bases)
    " 現在のHEADのmerge-baseにするブランチとそのコミットハッシュ
    let g:my_diff_base_branch = ''
    let g:my_diff_base_hash = ''

    let g:my_git_repo = system('cd '. expand("%:h") . ' && git remote get-url origin 2> /dev/null| grep -Eo "([a-zA-Z0-9+-]+)\/([a-zA-Z0-9+-]+).git$"')
    if g:my_git_repo != ""
      let g:my_git_repo = matchstr(g:my_git_repo, ".*git", "")
      let g:my_git_repo = substitute(g:my_git_repo, ".git$", "", "g")
    endif

    for diff_base in a:diff_bases
      let s:merge_base = system('cd '. expand("%:h") . ' && git merge-base ' . diff_base . ' HEAD')
      if v:shell_error == 0
        " ex) gitのハッシュ値'5257cd3ee04ca2ca47ba0ead3e68e980e4b4e552'[0:7] ==> '5257cd3'
        let g:gitgutter_diff_base = s:merge_base[0:7]
        let g:my_diff_base_hash = g:gitgutter_diff_base
        let g:my_diff_base_branch = diff_base
        break
      endif
    endfor
    GitGutter
  endfunction

  " 現在の比較対象(diff_base)を表示するコマンド
  " 使い方:
  "   :GitGutterShowDiffBase[enter]
  command! -nargs=0 GitGutterShowDiffBase :echo "GitGutter 現在の比較対象は[" . g:gitgutter_diff_base . "] です"

  " 比較対象(diff_base)を変更するコマンド
  " 使い方:
  "   :GGCB develop[enter] など
  command! -nargs=1 GGCB call s:change_base(<f-args>)
  function! s:change_base(diff_base)
    echo "GitGutter 比較対象を[" . g:gitgutter_diff_base . "]->[" . a:diff_base ."]に変更しました。"
    let g:gitgutter_diff_base = a:diff_base
    GitGutter
  endfunction
'''

[[plugins]]
repo = 'vim-jp/vimdoc-ja'



# 他のキーバインドとしばしば競合する？
# # 文字をシングルクォートとか（）で囲む
# [[plugins]]
# repo = 'tpope/vim-surround'
# hook_add='''
#   xmap " S"
#   xmap ' S'
#   xmap ) S)
#   xmap } S}
#   xmap ] S]
#   xmap > S>
# '''

[[plugins]]
repo = 'tpope/vim-repeat'
on_idle = 1


[[plugins]]
repo = 'Shougo/echodoc.vim'
hook_add='''
  set cmdheight=2
  " Option 4:
  " Or, you could use neovim's floating text feature.
  "
  let g:echodoc#enable_at_startup = 1
  let g:echodoc#type = 'floating'
  " To use a custom highlight for the float window,
  " change Pmenu to your highlight group
  highlight link EchoDocFloat Constant

  " Option 5:
  " Or, you could use vim's popup window feature.
  "let g:echodoc#enable_at_startup = 1
  "let g:echodoc#type = 'popup'
  " To use a custom highlight for the popup window,
  " change Pmenu to your highlight group
  "highlight link EchoDocPopup Pmenu
'''

[[plugins]]
repo = 'Shougo/neosnippet.vim'
hook_add = '''
"imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)
imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
      \ "\<Plug>(neosnippet_expand_or_jump)"
      \: pumvisible() ? "\<C-n>" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
      \ "\<Plug>(neosnippet_expand_or_jump)"
      \: "\<TAB>"
if has('conceal')
  set conceallevel=2 concealcursor=i
endif
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'

[[plugins]]
repo='thinca/vim-quickrun'
hook_add = '''
  nnoremap <f5> :QuickRun<CR>
  vnoremap <f5> :QuickRun<CR>
  nnoremap <expr><silent> <C-c> quickrun#is_running() ? quickrun#sweep_sessions() : "<C-c>"

  let g:quickrun_config = {
  \ "_" : {
  \  "runner" : "vimproc",
  \  "runner/vimproc/updatetime" : 60,
  \  "outputter/buffer/split" : "botright 8sp",
  \  "outputter/buffer/close_on_empty" : 1
  \  },
  \ }
'''



[[plugins]]
repo = 'ippsio/clip_diff.vim'
hook_add = '''
  vmap ,d :call ClipDiff()<CR>
'''

[[plugins]]
repo = 'kana/vim-operator-user'

[[plugins]]
repo = 'kana/vim-operator-replace'
hook_add = '''
map _ <Plug>(operator-replace)
'''


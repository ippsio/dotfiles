# DDC SOURCE
# ===================================================
# [ddc-source] カーソル周辺の既出単語を補完するsource
[[plugins]]
repo='Shougo/ddc-around'
on_source='ddc.vim'

# [ddc-source] ファイル名を補完するsource
[[plugins]]
repo='Shougo/ddc-file'
on_source='ddc.vim'

# [ddc-source] 英語補完source
[[plugins]]
repo='Shougo/ddc-mocword'
on_source='ddc.vim'

# [ddc-source] nvim-lsp completion for ddc.vim
[[plugins]]
repo='Shougo/ddc-nvim-lsp'
on_source='ddc.vim'
# [ddc-source] コマンド履歴補完

[[plugins]]
repo='Shougo/ddc-source-nvim-lsp'
on_source='ddc.vim'

[[plugins]]
repo='Shougo/ddc-cmdline-history'
on_source='ddc.vim'

[[plugins]]
repo = 'Shougo/neco-vim'
on_source='ddc.vim'

[[plugins]]
repo = 'octaltree/cmp-look'
on_source='ddc.vim'

# ===================================================
# DDC FILTER
# ===================================================
# [ddc-filter] 入力中の単語を補完の対象にするfilter
[[plugins]]
repo='Shougo/ddc-matcher_head'
on_source='ddc.vim'

# [ddc-filter] 補完候補を適切にソートするfilter
[[plugins]]
repo='Shougo/ddc-sorter_rank'
on_source='ddc.vim'

# [ddc-filter] 補完候補の重複を防ぐためのfilter
[[plugins]]
repo='Shougo/ddc-converter_remove_overlap'
on_source='ddc.vim'

## [ddc-filter] Fuzzy Finder な filter
[[plugins]]
repo='tani/ddc-fuzzy'
on_source='ddc.vim'

# # [ddc-filter] Fuzzy Finder な filterその２。
# [[plugins]]
# repo='matsui54/ddc-matcher_fuzzy'
# on_source='ddc.vim'

# ===================================================
# UI
# ===================================================
[[plugins]]
repo='Shougo/ddc-ui-native'
on_source='ddc.vim'

[[plugins]]
repo='Shougo/ddc-ui-pum'
on_source='ddc.vim'

[[plugins]]
repo='Shougo/pum.vim'
on_source='ddc.vim'

# ===================================================
# DDC
# ===================================================
[[plugins]]
repo='vim-denops/denops.vim'

[[plugins]]
repo = 'Shougo/ddc.vim'
on_event = 'InsertEnter'
depends = ['denops.vim']
hook_add='''
" call ddc#custom#patch_global('completionMenu', 'pum.vim')

" pum#visible() が真で、ポップアップの選択肢を上下移動します。
" pum#visible() が偽で、｛カーソルが行頭、又はカーソル直前が空白｝なら、単に<Up>,<Down>します。そうでなければddcのポップアップを開きます。
" [補足] col('.') <= 1 は、カーソルが行頭の場合、真です。
" [補足] getline('.')[col('.') - 2] =~# '\s' は、カーソルの直前が空白の場合、真です。
" [補足] <Bar><Bar> は || (OR演算子) を意味します。
inoremap <silent><expr> <C-p>  pum#visible() ? '<Cmd>call pum#map#insert_relative(+1)<CR>' : (col('.') <= 1 <Bar><Bar> getline('.')[col('.') - 2] =~# '\s') ? '<Up>'   : ddc#map#manual_complete()
inoremap <silent><expr> <C-n>  pum#visible() ? '<Cmd>call pum#map#insert_relative(-1)<CR>' : (col('.') <= 1 <Bar><Bar> getline('.')[col('.') - 2] =~# '\s') ? '<Down>' : ddc#map#manual_complete()

" pum#visible() の状態によらず call pum#map#insert_relativeします。
" [補足] 最小構成のvimにおけるインサートモードでの <C-j>、<C-k> は機能しなくなります。
inoremap <silent> <C-k>  <Cmd>call pum#map#insert_relative(-1)<CR>
inoremap <silent> <C-j>  <Cmd>call pum#map#insert_relative(+1)<CR>

" pum#visible() が真なら、ポップアップの選択肢を上下移動します。
" pum#visible() が偽なら、単に<Up>,<Down>します。
inoremap <silent><expr> <Up>   pum#visible() ? '<Cmd>call pum#map#insert_relative(-1)<CR>' : '<Up>'
inoremap <silent><expr> <Down> pum#visible() ? '<Cmd>call pum#map#insert_relative(+1)<CR>' : '<Down>'

inoremap <silent><expr> <CR>   pum#visible() ? '<Cmd>call pum#map#confirm()<CR>' : '<CR>'
inoremap <silent><expr> <Esc>  pum#visible() ? '<Cmd>call pum#map#cancel()<CR>' : '<Esc>'

call ddc#custom#patch_global('autoCompleteEvents', ['InsertEnter', 'TextChangedI', 'TextChangedP', 'CmdlineEnter', 'CmdlineChanged', ])

call ddc#custom#patch_global('sourceOptions', {'around': {
  \ 'mark': 'ddc-arround'}, })

call ddc#custom#patch_global('sourceOptions', {
  \ 'nvim-lsp': { 'mark': 'lsp', 'forceCompletionPattern': '\.\w*|:\w*|->\w*' }})

call ddc#custom#patch_global('sourceOptions', {
  \ 'mocword': { 'mark': 'mocword', 'minAutoCompleteLength': 3, 'isVolatile': v:true }})

call ddc#custom#patch_global('sourceOptions', {
  \ 'look': { 'converters': ['loud', 'matcher_head'], 'matchers': [], 'mark': 'look', 'isVolatile': v:true, }})

call ddc#custom#patch_global('sourceOptions', {
  \ 'cmdline-history': {'mark': 'ddc-cmdline-history'}})

call ddc#custom#patch_global('sourceOptions', {
  \ 'file': { 'mark': 'ddc-file', 'isVolatile': v:true, 'forceCompletionPattern': '\S/\S*'}})

call ddc#custom#patch_global('sourceOptions', {
  \ '_': { 'minAutoCompleteLength': 2, 'matchers': ['matcher_fuzzy'], 'sorters': ['sorter_rank'], 'converters': ['converter_fuzzy']}})

"call ddc#custom#patch_global('filterParams', { 'matcher_fuzzy': {'camelcase': v:true}, })

"call ddc#custom#patch_global('sourceOptions', {
" \ '_': { 'matchers': ['matcher_head'], 'sorters': ['sorter_rank']}, })

"call ddc#custom#patch_global('sources', [ 'nvim-lsp', 'around', 'file', ])
call ddc#custom#patch_global('sources', [ 'nvim-lsp', 'around', 'file', ])

" ddc-cmdline-history

" ddc-arround
call ddc#custom#patch_global('sourceParams', {
  \ 'around': {'maxSize': 500}})

call ddc#custom#patch_global('sourceParams', {
  \ 'nvim-lsp': { 'kindLabels': { 'Class': 'c' } }})

call ddc#custom#patch_global('sourceParams', {
  \ 'look': { 'convertCase': v:true, 'dict': v:null }})

" ddc-file
call ddc#custom#patch_filetype(['ps1', 'dosbatch', 'autohotkey', 'registry'], {
\ 'sourceOptions': { 'file': { 'forceCompletionPattern': '\S\\\S*', }, },
\ 'sourceParams': { 'file': { 'mode': 'win32', }, }})

"call ddc#custom#patch_global('ui', 'native')
call ddc#custom#patch_global('ui', 'pum')
call ddc#custom#patch_global({
\ 'keywordPattern': '[a-zA-Z_]\w*',
\ })

" Use ddc.
call ddc#enable()
'''

# ===================================================
# DDC SOURCE
# ===================================================
# [ddc-source] カーソル周辺の既出単語を補完するsource
[[plugins]]
repo='Shougo/ddc-around'
on_source = 'ddc.vim'

# [ddc-source] ファイル名を補完するsource
[[plugins]]
repo='Shougo/ddc-file'
on_source = 'ddc.vim'

# [ddc-source] 英語補完source
[[plugins]]
repo='Shougo/ddc-mocword'
on_source = 'ddc.vim'

# [ddc-source] nvim-lsp completion for ddc.vim
[[plugins]]
repo='Shougo/ddc-nvim-lsp'
on_source = 'ddc.vim'
# [ddc-source] コマンド履歴補完

[[plugins]]
repo='Shougo/ddc-source-nvim-lsp'
on_source = 'ddc.vim'

[[plugins]]
repo='Shougo/ddc-cmdline-history'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/neco-vim'
on_source = 'ddc.vim'

[[plugins]]
repo = 'octaltree/cmp-look'
on_source = 'ddc.vim'

# ===================================================
# DDC FILTER
# ===================================================
# [ddc-filter] 入力中の単語を補完の対象にするfilter
[[plugins]]
repo='Shougo/ddc-matcher_head'
on_source = 'ddc.vim'

# [ddc-filter] 補完候補を適切にソートするfilter
[[plugins]]
repo='Shougo/ddc-sorter_rank'
on_source = 'ddc.vim'

# [ddc-filter] 補完候補の重複を防ぐためのfilter
[[plugins]]
repo='Shougo/ddc-converter_remove_overlap'
on_source = 'ddc.vim'

## [ddc-filter] Fuzzy Finder な filter
[[plugins]]
repo='tani/ddc-fuzzy'
on_source = 'ddc.vim'

# # [ddc-filter] Fuzzy Finder な filterその２。
# [[plugins]]
# repo='matsui54/ddc-matcher_fuzzy'
# on_source = 'ddc.vim'

# ===================================================
# UI
# ===================================================
[[plugins]]
repo='Shougo/ddc-ui-native'
on_source='ddc.vim'
hook_add='''
'''

[[plugins]]
repo='Shougo/ddc-ui-pum'
on_source='ddc.vim'
hook_add='''
'''

[[plugins]]
repo='Shougo/pum.vim'
hook_add='''
'''
on_source='ddc.vim'

# ===================================================
# DDC
# ===================================================
[[plugins]]
repo='vim-denops/denops.vim'

[[plugins]]
repo = 'Shougo/ddc.vim'
on_event = 'InsertEnter'
depends = ['denops.vim']
hook_add='''
" pum.vim {{{
"call ddc#custom#patch_global('completionMenu', 'pum.vim')
"

" <Tab>: completion.
inoremap <silent><expr> <TAB>
      \ pum#visible() ? '<Cmd>call pum#map#insert_relative(+1)<CR>' :
      \ (col('.') <= 1 <Bar><Bar> getline('.')[col('.') - 2] =~# '\s') ?
      \ '<TAB>' : ddc#manual_complete()

" <C-space>: completion.
inoremap <silent><expr> <C-space>
      \ ddc#map#pum_visible() ? '<C-n>' : ddc#map#manual_complete()

inoremap <Tab>   <Cmd>call pum#map#insert_relative(+1)<CR>
inoremap <S-Tab> <Cmd>call pum#map#insert_relative(-1)<CR>
inoremap <C-n>   <Cmd>call pum#map#insert_relative(+1)<CR>
inoremap <C-j>   <Cmd>call pum#map#insert_relative(+1)<CR>

inoremap <silent><expr> <Down> pum#visible() ? '<Cmd>call pum#map#insert_relative(+1)<CR>' : '<Down>'
" inoremap <silent><expr> <Down>
" \ pum#visible() ? '<Cmd>call pum#map#insert_relative(+1)<CR>' :
" \ (col('.') <= 1 <Bar><Bar> getline('.')[col('.') - 2] =~# '\s') ?
" \ '<Down>' : ddc#manual_complete()
inoremap <silent><expr> <Up>   pum#visible() ? '<Cmd>call pum#map#insert_relative(-1)<CR>' : '<Up>'
" inoremap <silent><expr> <Up>
" \ pum#visible() ? '<Cmd>call pum#map#insert_relative(-1)<CR>' :
" \ (col('.') <= 1 <Bar><Bar> getline('.')[col('.') - 2] =~# '\s') ?
" \ '<Up>' : ddc#manual_complete()
inoremap <silent><expr> <CR>   pum#visible() ? '<Cmd>call pum#map#confirm()<CR>' : '<CR>'

inoremap <C-p>   <Cmd>call pum#map#insert_relative(-1)<CR>
inoremap <C-k>   <Cmd>call pum#map#insert_relative(-1)<CR>
"inoremap <Down>   <Cmd>call pum#map#insert_relative(+1)<CR>
"inoremap <Up>   <Cmd>call pum#map#insert_relative(-1)<CR>
inoremap <C-y>   <Cmd>call pum#map#confirm()<CR>
inoremap <C-e>   <Cmd>call pum#map#cancel()<CR>
inoremap <PageDown> <Cmd>call pum#map#insert_relative_page(+1)<CR>
inoremap <PageUp>   <Cmd>call pum#map#insert_relative_page(-1)<CR>

call ddc#custom#patch_global('autoCompleteEvents', ['InsertEnter', 'TextChangedI', 'TextChangedP', 'CmdlineEnter', 'CmdlineChanged', ])

"""" コマンドライン
"""nnoremap :       <Cmd>call CommandlinePre()<CR>:
"""function! CommandlinePre() abort
"""  " Note: It disables default command line completion!
"""  cnoremap <expr> <Tab>
"""  \ pum#visible() ? '<Cmd>call pum#map#insert_relative(+1)<CR>' :
"""  \ ddc#manual_complete()
"""  cnoremap <S-Tab> <Cmd>call pum#map#insert_relative(-1)<CR>
"""  cnoremap <C-y>   <Cmd>call pum#map#confirm()<CR>
"""  cnoremap <C-e>   <Cmd>call pum#map#cancel()<CR>
"""
"""  " Overwrite sources
"""  let s:prev_buffer_config = ddc#custom#get_buffer()
"""  "call ddc#custom#patch_buffer('sources', ['nvim-lsp', 'cmdline', 'around', 'cmdline-history'])
"""  call ddc#custom#patch_buffer('sources', ['nvim-lsp', 'cmdline', 'around'])
"""
"""  autocmd User DDCCmdlineLeave ++once call CommandlinePost()
"""
"""  " Enable command line completion
"""  call ddc#enable_cmdline_completion()
"""  call ddc#enable()
"""endfunction
"""function! CommandlinePost() abort
"""  " Restore sources
"""  call ddc#custom#set_buffer(s:prev_buffer_config)
"""  cunmap <Tab>
"""endfunction
"""" }}}

call ddc#custom#patch_global('sourceOptions', {'around': {
  \ 'mark': 'ddc-arround'}, })

call ddc#custom#patch_global('sourceOptions', {
  \ 'nvim-lsp': { 'mark': 'lsp', 'forceCompletionPattern': '\.\w*|:\w*|->\w*' }})

call ddc#custom#patch_global('sourceOptions', {
  \ 'mocword': { 'mark': 'mocword', 'minAutoCompleteLength': 3, 'isVolatile': v:true }})

call ddc#custom#patch_global('sourceOptions', {
  \ 'look': { 'converters': ['loud', 'matcher_head'], 'matchers': [], 'mark': 'look', 'isVolatile': v:true, }})

call ddc#custom#patch_global('sourceOptions', {
  \ 'cmdline-history': {'mark': 'ddc-cmdline-history'}})

call ddc#custom#patch_global('sourceOptions', {
  \ 'file': { 'mark': 'ddc-file', 'isVolatile': v:true, 'forceCompletionPattern': '\S/\S*'}})

call ddc#custom#patch_global('sourceOptions', {
  \ '_': { 'minAutoCompleteLength': 2, 'matchers': ['matcher_fuzzy'], 'sorters': ['sorter_rank'], 'converters': ['converter_fuzzy']}})

"call ddc#custom#patch_global('filterParams', { 'matcher_fuzzy': {'camelcase': v:true}, })

"call ddc#custom#patch_global('sourceOptions', {
" \ '_': { 'matchers': ['matcher_head'], 'sorters': ['sorter_rank']}, })

call ddc#custom#patch_global('sources', [ 'nvim-lsp', 'around', 'file', ])

" ddc-cmdline-history

" ddc-arround
call ddc#custom#patch_global('sourceParams', {
  \ 'around': {'maxSize': 500}})

call ddc#custom#patch_global('sourceParams', {
  \ 'nvim-lsp': { 'kindLabels': { 'Class': 'c' } }})

call ddc#custom#patch_global('sourceParams', {
  \ 'look': { 'convertCase': v:true, 'dict': v:null }})

" ddc-file
call ddc#custom#patch_filetype(['ps1', 'dosbatch', 'autohotkey', 'registry'], {
\ 'sourceOptions': { 'file': { 'forceCompletionPattern': '\S\\\S*', }, },
\ 'sourceParams': { 'file': { 'mode': 'win32', }, }})

"call ddc#custom#patch_global('ui', 'native')
call ddc#custom#patch_global('ui', 'pum')
call ddc#custom#patch_global({
\ 'keywordPattern': '[a-zA-Z_]\w*',
\ })

" <TAB>: completion.
inoremap <silent><expr> <TAB>
\ ddc#map#pum_visible() ? '<C-n>' :
\ (col('.') <= 1 <Bar><Bar> getline('.')[col('.') - 2] =~# '\s') ?
\ '<TAB>' : ddc#map#manual_complete()

" <S-TAB>: completion back.
inoremap <expr><S-TAB>  ddc#map#pum_visible() ? '<C-p>' : '<C-h>'

" Use ddc.
call ddc#enable()
'''


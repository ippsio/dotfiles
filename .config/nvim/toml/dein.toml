[[plugins]]
repo = 'Shougo/dein.vim'
[[plugins]]
repo = 'Shougo/neomru.vim'
[[plugins]]
repo = 'Shougo/unite-outline'
[[plugins]]
repo = 'Shougo/neomru.vim'
[[plugins]]
repo = 'Shougo/neoyank.vim'
[[plugins]]
repo = 'Shougo/Unite.vim'
depends = ['Shougo/neomru.vim']
[[plugins]]
repo = 'Shougo/denite.nvim'
depends = ['Shougo/neomru.vim']
hook_add='''
  nnoremap <space>dr :<C-u>Denite file_mru<CR>
  nnoremap <space>db :<C-u>Denite buffer<CR>
  nnoremap <space>dy :<C-u>Denite neoyank<CR>
  nnoremap <space>df :<C-u>Denite file/rec<CR>
  nnoremap <space>do :<C-u>Denite outline<CR>

'''
[[plugins]]
repo = 'Shougo/deoplete.nvim'
#hook_add = '''
#  let g:deoplete#enable_at_startup = 1
#  inoremap <expr><Tab> pumvisible() ? "\<DOWN>" : "\<Tab>"
#  inoremap <expr><S-Tab> pumvisible() ? "\<UP>" : "\<S-Tab>"
#  let g:deoplete-options-auto_complete = v:false
#'''
hook_source = '''
  let g:deoplete#enable_at_startup = 1
  let g:deoplete#enable_ignore_case = 1
  let g:deoplete#enable_smart_case = 1

  " <TAB>: completion.
  imap <silent><expr> <TAB> pumvisible() ? "\<C-n>" : <SID>check_back_space() ? "\<TAB>" : deoplete#mappings#manual_complete()
  function! s:check_back_space() abort
      let col = col('.') - 1
      return !col || getline('.')[col - 1]  =~ '\s'
  endfunction

  " <S-TAB>: completion back.
  inoremap <expr><S-TAB>  pumvisible() ? "\<C-p>" : "\<C-h>"

  " <BS>: close popup and delete backword char.
  inoremap <expr><BS> deoplete#smart_close_popup()."\<C-h>"

  " " <CR>: close popup and save indent.
  " inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
  " function! s:my_cr_function() abort
  "   return deoplete#cancel_popup() . "\<CR>"
  " endfunction
'''
#hook_source = '''
#  " <TAB>: completion.
#  inoremap <silent><expr> <TAB>
#        \ pumvisible() ? "\<C-n>" :
#        \ <SID>check_back_space() ? "\<TAB>" :
#        \ deoplete#manual_complete()
#  function! s:check_back_space() abort "{{{
#    let col = col('.') - 1
#    return !col || getline('.')[col - 1]  =~ '\s'
#  endfunction"}}}
#
#  " <S-TAB>: completion back.
#  inoremap <expr><S-TAB>  pumvisible() ? "\<C-p>" : "\<C-h>"
#
#  " <BS>: close popup and delete backword char.
#  inoremap <expr><BS> deoplete#smart_close_popup()."\<C-h>"
#
#  " " <CR>: close popup and save indent.
#  " inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
#  " function! s:my_cr_function() abort
#  "   return deoplete#cancel_popup() . "\<CR>"
#  " endfunction
#'''
on_event = 'InsertEnter'

[[plugins]]
repo = 'Shougo/context_filetype.vim'

# 終了タグ等の自動補完
[[plugins]]
repo = 'tpope/vim-endwise'

# 文字をシングルクォートとか（）で囲む
[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'easymotion/vim-easymotion'
hook_add = '''
  let g:EasyMotion_do_mapping = 0
  map  F <Plug>(easymotion-bd-w)
  nmap F <Plug>(easymotion-overwin-w)
'''

[[plugins]]
repo = 'vim-scripts/taglist.vim'
hook_add = '''
  set tags+=.tags;~/
  "let g:Tlist_Auto_Open = 1
  "let g:Tlist_File_Fold_Auto_Close = 1
  let g:Tlist_Exit_OnlyWindow = 1
  "let g:Tlist_Show_One_File = 1
  let g:Tlist_Use_SingleClick = 1
  let g:Tlist_Highlight_Tag_On_BufEnter = 1
  let g:Tlist_Use_Right_Window = 1
  let g:Tlist_Exit_OnlyWindow = 1

  nnoremap <silent> <space>l :TlistToggle<CR>
'''

# statusline
[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
  if !has('gui_running')
    set t_Co=256
  endif

  set laststatus=2
  "let g:lightline_colorscheme = '16color'
  "let g:lightline_colorscheme = 'OldHope'
  "let g:lightline_colorscheme = 'PaperColor'
  let g:lightline_colorscheme = 'PaperColor_dark'
  "let g:lightline_colorscheme = 'PaperColor_light'
  "let g:lightline_colorscheme = 'Tomorrow'
  "let g:lightline_colorscheme = 'Tomorrow_Night'
  "let g:lightline_colorscheme = 'Tomorrow_Night_Blue'
  "let g:lightline_colorscheme = 'Tomorrow_Night_Bright'
  "let g:lightline_colorscheme = 'Tomorrow_Night_Eighties'
  "let g:lightline_colorscheme = 'darcula'
  "let g:lightline_colorscheme = 'defaul'
  "let g:lightline_colorscheme = 'deus'
  "let g:lightline_colorscheme = 'jellybeans'
  "let g:lightline_colorscheme = 'landscape'
  "let g:lightline_colorscheme = 'materia'
  "let g:lightline_colorscheme = 'material'
  "let g:lightline_colorscheme = 'molokai'
  "let g:lightline_colorscheme = 'nord'
  "let g:lightline_colorscheme = 'one'
  "let g:lightline_colorscheme = 'powerline'
  "let g:lightline_colorscheme = 'seoul256'
  "let g:lightline_colorscheme = 'solarized'
  "let g:lightline_colorscheme = 'srcery_drk'
  "let g:lightline_colorscheme = 'wombat'
  let g:lightline = {
    \ 'colorscheme': g:lightline_colorscheme,
    \ 'active': {'left': [['mode', 'paste'], ['readonly', 'filename', 'modified', 'anzu']]},
    \ 'component_function': {'anzu': 'anzu#search_status'}}
'''

# インデントを可視化
[[plugins]]
repo = 'Yggdroot/indentLine'

# 無駄な空白をハイライト
[[plugins]]
repo = 'bronson/vim-trailing-whitespace'

# /検索強化
[[plugins]]
repo = 'osyo-manga/vim-anzu'
hook_add = '''
  nmap n nzz<Plug>(anzu-update-search-status)
  nmap N Nzz<Plug>(anzu-update-search-status)
  nmap * <Plug>(anzu-star)
  nmap # <Plug>(anzu-sharp)
  nmap <silent> <ESC> :<C-u>nohlsearch<CR><Plug>(anzu-clear-search-status)
'''

# vimのf検索中に、f連打で次々と検索できるようにする
[[plugins]]
repo = 'rhysd/clever-f.vim'

[[plugins]]
repo = 'fholgado/minibufexpl.vim'
hook_add = '''
  " 画面上部に最低2行で表示
  "let g:miniBufExplMinSize = 2

  " 画面横に表示
  let g:miniBufExplBRSplit = 1  " 右
  "let g:miniBufExplBRSplit = 0  " 左
  let g:miniBufExplVSplit = 30

  let g:miniBufExplorerMoreThanOne = 1
  set background=dark

  let g:miniBufExplorerAutoStart = 0

  " MiniBufExpl Colors
  hi MBENormal               guifg=fg      guibg=fg
  hi MBEVisibleNormal        guifg=fg      guibg=#000088
  hi MBEVisibleActiveNormal  guifg=fg      guibg=#cc2222
  hi MBEChanged              guifg=#ff0000 guibg=fg
  hi MBEVisibleChanged       guifg=#ff0000 guibg=#000088
  hi MBEVisibleActiveChanged guifg=#ff0000 guibg=#cc2222
  let g:did_minibufexplorer_syntax_inits = 1

  nnoremap <silent> <space>m :MBEToggle<CR>
'''

# NERDTree
[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
  " vim起動時のフォーカス移動
  function s:MoveToFileAtStart()
    " NERDTreeを起動された時、ちゃんと編集側のウインドウ(NERDTreeじゃない方のウインドウ）にフォーカスを当てる
    call feedkeys("\<C-w>l")
  endfunction

  " vim起動時にNERDTreeを起動
  " さらにカーソルをちゃんとファイルの側のウインドウに移動
  autocmd VimEnter *  NERDTree | call s:MoveToFileAtStart()

  " NERDTree起動時、ブックマーク開く
  let g:NERDTreeShowBookmarks=1

  "他のバッファをすべて閉じた時にNERDTreeが開いていたらNERDTreeも一緒に閉じる。
  autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
  autocmd StdinReadPre * let s:std_in=1
  "autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

  " \の後Nでトグル（閉じてたNERDTreeを開く、開いてたNERDTreeを閉じる）
  map <silent> <space>n :NERDTreeToggle<CR>

  " 隠しファイルの表示
  let g:NERDTreeShowHidden = 1

  " 横幅
  let g:NERDTreeWinSize = 45

  " NERDTress File highlighting
  function! s:hi_file(extension, fg, bg, guifg, guibg)
    exec 'autocmd filetype nerdtree highlight ' . a:extension .' ctermbg='. a:bg .' ctermfg='. a:fg .' guibg='. a:guibg .' guifg='. a:guifg
    exec 'autocmd filetype nerdtree syn match ' . a:extension .' #^\s\+.*'. a:extension .'$#'
  endfunction
  call s:hi_file('directories',     'yellow',  'none', 'yellow',  '#151515')
  call s:hi_file('py',     'yellow',  'none', 'yellow',  '#151515')
  call s:hi_file('md',     'blue',    'none', '#3366FF', '#151515')
  call s:hi_file('yml',    'yellow',  'none', 'yellow',  '#151515')
  call s:hi_file('vim',    'yellow',  'none', 'yellow',  '#133535')
  call s:hi_file('config', 'yellow',  'none', 'yellow',  '#151515')
  call s:hi_file('conf',   'yellow',  'none', 'yellow',  '#151515')
  call s:hi_file('json',   'yellow',  'none', 'yellow',  '#151515')
  call s:hi_file('html',   'yellow',  'none', 'yellow',  '#151515')
  call s:hi_file('styl',   'cyan',    'none', 'cyan',    '#151515')
  call s:hi_file('css',    'cyan',    'none', 'cyan',    '#151515')
  call s:hi_file('rb',     'Red',     'none', '#cc2233',     '#151515')
  call s:hi_file('js',     'Red',     'none', '#ffa500', '#151515')
  call s:hi_file('php',    'Magenta', 'none', '#ff00ff', '#151515')
  call s:hi_file('toml',   'Gray',    'none', '#ff00ff', '#151515')
'''

[[plugins]]
repo = 'Xuyuanp/nerdtree-git-plugin'

[[plugins]]
repo = 'ctrlpvim/ctrlp.vim'
depends = ['rking/ag.vim']
hook_add = '''
  if executable('ag')
    let g:ctrlp_use_caching=0
    let g:ctrlp_user_command='ag %s -i --nocolor --nogroup -g ""'
  endif

  " CTRL+Q、CTRL+Shift+Q でCtrlP起動
  let g:ctrlp_map = '<c-s-q>'
'''

[[plugins]]
repo = 'rking/ag.vim'

[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
  set signcolumn=yes
'''

[[plugins]]
repo = 'tpope/vim-fugitive'
hook_add = '''
  nnoremap <silent> <space>a :Gblame<CR>
'''

[[plugins]]
repo = 'kana/vim-submode'
hook_add = '''
  " - submode#enter_with:
  "     Define a key mapping to enter the {submode} from {modes}.
  "     If {rhs} is given, it will be executed whenever entering the {submode} by {lhs}.
  "
  "  - 1: submode name
  "  - 2: mode (n:normal, i:insert, ni:normal & insert), ...
  "  - 3: map option (b:<buffer>, e:<expr>)
  "  - 4: {lhs} of map
  "  - 5: {rhs} of map
  "
  " - submode#map:
  "     Define a key mapping ({lhs} to {rhs}) in the {submode} in {modes}.
  "
  "  - 1: submode name
  "  - 2: mode (n:normal, i:insert, ni:normal & insert), ...
  "  - 3: map option (b:<buffer>, e:<expr>)
  "  - 4: {lhs} of map
  "  - 5: {rhs} of map

  " my window mode
  " ウインドウの幅変更
  call submode#enter_with('window_mode', 'n', '', '<C-w>'.'<', '<C-w>5'.'<')
  call submode#map(       'window_mode', 'n', '',         '<', '<C-w>5'.'<')
  call submode#enter_with('window_mode', 'n', '', '<C-w>'.'>', '<C-w>5'.'>')
  call submode#map(       'window_mode', 'n', '',         '>', '<C-w>5'.'>')

  " ウインドウの高さ変更
  call submode#enter_with('window_mode', 'n', '', '<C-w>'.'-', '<C-w>5'.'-')
  call submode#map(       'window_mode', 'n', '',         '-', '<C-w>5'.'-')
  call submode#enter_with('window_mode', 'n', '', '<C-w>'.'+', '<C-w>5'.'+')
  call submode#map(       'window_mode', 'n', '',         '+', '<C-w>5'.'+')

  " ウインドウの高さ統一
  call submode#enter_with('window_mode', 'n', '', '<C-w>'.'=', '<C-w>'.'=')
  call submode#map(       'window_mode', 'n', '',         '=', '<C-w>'.'=')
'''

#[[plugins]]
#repo = 'fuenor/qfixhowm'
#hook_add = '''
#  " QFixHowm
#
#  "QFixHowmキーマップ
#  let g:QFixHowm_Key = 'g'
#
#  "howm_dirはファイルを保存したいディレクトリを設定。
#  let g:howm_dir             = '~/.memos'
#  let g:howm_filename        = '%Y/%m/%Y-%m-%d-%H%M%S.howm'
#  let g:howm_fileencoding    = 'utf-8'
#  let g:howm_fileformat      = 'unix'
#
#  let g:QFixHowm_DiaryFile = 'diary/%Y/%m/%Y-%m-%d-000000.howm'
#'''

# vimは大文字始まりのユーザ定義コマンドしか許容しないが、小文字始まりの方が指が楽なので、
# エイリアスをvim-altercmdでエイリアスを作り、小文字始まりのユーザ定義コマンドを実現できるようにする。
#
# * ユーザ定義コマンドとは、コロンで始まるコマンド
#   - rking/agなら :Ag とか
#   - scrooloose/nerdtree なら :NERDTreeFindとか :NERDTreeToggleとか
[[plugins]]
repo = 'tyru/vim-altercmd'
hook_add = '''
  " alias
  call altercmd#load()

  " Denite
  AlterCommand dr :<C-u>Denite file_mru
  AlterCommand db :<C-u>Denite buffer
  AlterCommand dy :<C-u>Denite neoyank
  AlterCommand df :<C-u>Denite file/rec
  AlterCommand do :<C-u>Denite outline

  " NERDTree
  AlterCommand ntf NERDTreeFind

  " Ag
  AlterCommand ag Ag
'''


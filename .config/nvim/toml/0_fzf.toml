###fzf
[[plugins]]
repo = 'junegunn/fzf'
build = './install --all --no-bash --no-fish --no-zsh'

[[plugins]]
repo = 'junegunn/fzf.vim'
hook_add = '''
  let g:fzf_layout = {'window': { 'width': 0.95, 'height': 0.95 } }
  " " Default fzf layout
  " " - Popup window (center of the screen)
  " let g:fzf_layout = { 'window': { 'width': 0.9, 'height': 0.6 } }
  " " - Popup window (center of the current window)
  " let g:fzf_layout = { 'window': { 'width': 0.9, 'height': 0.6, 'relative': v:true } }
  " " - Popup window (anchored to the bottom of the current window)
  " let g:fzf_layout = { 'window': { 'width': 0.9, 'height': 0.6, 'relative': v:true, 'yoffset': 1.0 } }
  " " - down / up / left / right
  " let g:fzf_layout = { 'down': '40%' }
  " " - Window using a Vim command
  " let g:fzf_layout = { 'window': 'enew' }
  " let g:fzf_layout = { 'window': '-tabnew' }
  " let g:fzf_layout = { 'window': '10new' }

  " バッファ一覧をfzfで絞り込む
  nnoremap ; :Buffers<CR>

  " 現在開いてるファイルがgit管理下ならそのディレクトリを、そうでなければ現在のパスを返す。
  function! s:GetDir(args0)
    if a:args0 != ''
      if isdirectory(a:args0)
        return a:args0
      else
        throw 'ディレクトリ ['.a:args0.'] っつうのが見つからない。'
      endif
    else
      let s:git_root = system('cd ' . expand('%:p:h') . '; git rev-parse --show-toplevel 2> /dev/null')[:-2]
      return s:git_root != '' ? s:git_root : expand('%:p:h')
    endif
  endfunction

  "nnoremap <silent> ' :<C-u>:BLinesWithPreview  def <CR>
  "nnoremap <silent> ? :<C-u>:BLinesWithPreview<CR>
  " NOTE: ここでのシングルクォートによるremapは、
  " ハイライト一覧の閲覧「:so $VIMRUNTIME/syntax/hitest.vim」実行時にバッティングします。
  " ハイライト一覧を見たい場合、このnnoremap は一旦コメントアウトしましょう...。
  nnoremap <silent> ' :<C-u>:BLinesWithPreview<CR>
  command! -bang -nargs=* BLinesWithPreview
        \ call fzf#vim#grep(
        \   'rg --with-filename --line-number --no-heading --smart-case . '.fnameescape(expand('%:p')),
        \   1,
        \   fzf#vim#with_preview(
        \     {'options': '--prompt="' . expand('%:p:h') . ' > " --info=inline --layout reverse --query '.shellescape(<q-args>).' --with-nth=2.. --nth=2.. --delimiter=":"'},
        \     'down:50%'
        \   )
        \ )

  " ファイル名の一覧をfzfで絞り込む
  nnoremap <C-p> :FzfFiles<CR>
  command! -bang -nargs=? -complete=dir FzfFiles
        \ call fzf#run(
        \   fzf#vim#with_preview(
        \     fzf#wrap(
        \       {
        \         'dir': s:GetDir(<q-args>),
        \         'source': 'find -s -E . -not -regex ".*(\.DS_Store|/*.git/).*" -and -type f'
        \       }
        \     )
        \   )
        \ )

  " 旧版
  " " ファイルの内容をripgrepで検索して、さらにfzfで絞り込む
  " command! -bang -nargs=* Grep
  "       \ call fzf#vim#grep(
  "       \   'rg --color=always --with-filename --line-number --no-heading --hidden --sortr path --ignore=.git ' . shellescape(<q-args>),
  "       \   1,
  "       \   fzf#vim#with_preview(
  "       \     {'options': '--prompt="filter > " --info=inline --layout reverse --with-nth=1.. --nth=1.. --delimiter=":" --preview-window=down,70%'}
  "       \   )
  "       \ )

  function! s:EditFile(args0)
    let l:list1 = split(a:args0[0], "\t")
    let l:list2 = split(l:list1[1], ":")

    " echo a:args0 => ['     2        some/file.txt:16:  hoge foo bar']
    " echo l:list1 => ['     2', 'some/file.txt:16:  hoge foo bar']
    " echo l:list2 => ['some/file.txt', '16', '  hoge foo bar']
    " echo l:list2[0] => 'some/file.txt'
    " echo l:list2[1] => '16'
    let l:file = l:list2[0]
    let l:line_no = l:list2[1]
    execute 'edit +' . l:line_no . ' ' . l:file
  endfunction

  " ファイルの内容をripgrepで検索して、さらにfzfで絞り込む
  command! -bang -nargs=* Grep
    \ call fzf#run({'source':
    \   'rg --color=never --with-filename --line-number --no-heading --hidden --sortr path --ignore=.git ' . shellescape(<q-args>) . '| cat -n',
    \   'sink*': function('s:EditFile'),
    \   'options': '-m --prompt "filter > " --info=inline --layout reverse --with-nth=1.. --nth=1.. --preview-window="wrap:down:75%" --preview "lineno=\$(echo {2}| sed -E \"s/(^.*):([0-9]*):(.*)/\2/\"); line_range=\$((\$lineno - 5 < 0 ? 1 : \$lineno - 5 )); file=\$(echo {2}| sed -e \"s/:.*//g\"); git rev-parse --is-inside-work-tree >/dev/null 2>&1; res=\$?; [[ \$res == 0 ]] && (git blame --show-name \$file| perl -pe \"s/ [^ ]*[ ]*\(/ (/\"| awk \"{ H1 = toupper(substr(\\\$1, 1, 1)); H2 = toupper(substr(\\\$1, 2, 1)); H[\\\"0\\\"] = 0; H[\\\"1\\\"] = 1; H[\\\"2\\\"] = 2; H[\\\"3\\\"] = 3; H[\\\"4\\\"] = 4; H[\\\"5\\\"] = 5; H[\\\"6\\\"] = 6; H[\\\"7\\\"] = 7; H[\\\"8\\\"] = 8; H[\\\"9\\\"] = 9; H[\\\"A\\\"] = 10; H[\\\"B\\\"] = 11; H[\\\"C\\\"] = 12; H[\\\"D\\\"] = 13; H[\\\"E\\\"] = 14; H[\\\"F\\\"] = 15; COLOR = H[H1] * 16 + H[H2]; printf(\\\"\033[38;5;%dm%s\033[0m\\\", COLOR, \\\$1); sub(/^[0-9a-fA-F]*/, \\\"\\\", \\\$0); printf \\\"%s\n\\\", \\\$0 }\"| bat --wrap auto --color=always --style=header --line-range \$line_range: --highlight-line \$lineno); [[ \$res != 0 ]] && (bat --wrap auto --color=always --style=header --line-range \$line_range: --highlight-line \$lineno \$file)"',
    \   'window': { 'width': 0.95, 'height': 0.95 }
    \   })
'''


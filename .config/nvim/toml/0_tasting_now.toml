# [[plugins]]
# repo = 'uplus/deoplete-solargraph'

#[[plugins]]
#repo = 'autozimu/LanguageClient-neovim'
#branch = 'next'
#build = 'bash install.sh'
#hook_add = ''' set hidden
#let g:LanguageClient_serverCommands = {
#    \ 'rust': ['~/.cargo/bin/rustup', 'run', 'stable', 'rls'],
#    \ 'javascript': ['/usr/local/bin/javascript-typescript-stdio'],
#    \ 'javascript.jsx': ['tcp://127.0.0.1:2089'],
#    \ 'python': ['pyls'],
#    \ '#ruby': ['~/.rbenv/shims/solargraph', 'stdio'],
#    \ }
#
#nnoremap <silent> K :call LanguageClient#textDocument_hover()<CR>
#nnoremap <silent> gd :call LanguageClient#textDocument_definition()<CR>
#nnoremap <silent> <F2> :call LanguageClient#textDocument_rename()<CR>
#'''

# [[plugins]]
# repo = 'fishbullet/deoplete-ruby'
# on_ft = ['ruby']

[[plugins]]
repo = 'Shougo/echodoc.vim'
hook_add = '''
  set cmdheight=2
  " Option 4:
  " Or, you could use neovim's floating text feature.
  "
  let g:echodoc#enable_at_startup = 1
  let g:echodoc#type = 'floating'
  " To use a custom highlight for the float window,
  " change Pmenu to your highlight group
  highlight link EchoDocFloat Constant

  " Option 5:
  " Or, you could use vim's popup window feature.
  let g:echodoc#enable_at_startup = 1
  let g:echodoc#type = 'popup'
  " To use a custom highlight for the popup window,
  " change Pmenu to your highlight group
  highlight link EchoDocPopup Pmenu
'''

[[plugins]]
repo = 'zchee/deoplete-jedi'

[[plugins]]
repo = 'davidhalter/jedi-vim'
on_ft = 'python'
hook_add = '''
set completeopt=menuone                        " 補完候補を呼び出すとき常にポップアップメニューを使う
autocmd! User jedi-vim call s:jedivim_hook()   " vim-plugの遅延ロード呼び出し
function! s:jedivim_hook()              " jedi-vimを使うときだけ呼び出す処理を関数化
  let g:jedi#auto_initialization    = 0 " 自動で実行される初期化処理を無効
  let g:jedi#auto_vim_configuration = 0 " 'completeopt' オプションを上書きしない
  let g:jedi#popup_on_dot           = 0 " ドット(.)を入力したとき自動で補完しない
  let g:jedi#popup_select_first     = 0 " 補完候補の1番目を選択しない
  let g:jedi#show_call_signatures   = 0 " 関数の引数表示を無効(ポップアップのバグを踏んだことがあるため)
  autocmd FileType python setlocal omnifunc=jedi#completions   " 補完エンジンはjediを使う
endfunction

'''


[[plugins]]
repo = 'Shougo/deoplete.nvim'
on_event = 'InsertEnter'
hook_add = '''
  " Enable deoplete when InsertEnter.
  let g:deoplete#enable_at_startup = 0
  autocmd InsertEnter * call deoplete#enable()

  let g:deoplete#enable_ignore_case = 1

  inoremap <expr><C-j> pumvisible() ? "\<C-n>" : "\<C-j>"
  inoremap <expr><C-k> pumvisible() ? "\<C-p>" : "\<C-k>"
  inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"
  inoremap <expr><C-g>   deoplete#undo_completion()

  " When I press enter, neovim closes the popup instead of inserting new line.
  " <CR>: close popup and save indent.
  " inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
  " function! s:my_cr_function() abort
  "   return deoplete#close_popup() . "\<CR>"
  " endfunction

  set completeopt+=noinsert

  " I want to close the preview window after completion is done.
  autocmd CompleteDone * silent! pclose!

  " I want to disable the preview window feature.
  "set completeopt-=preview

  " Pass a dictionary to set multiple options
  call deoplete#custom#option({
  \ 'auto_complete_delay': 5,
  \ 'smart_case': v:true,
  \ 'auto_complete': v:true,
  \ 'on_insert_enter': v:false,
  \ 'on_text_changed_i': v:true,
  \ 'num_processes': 2,
  \ })
'''

[[plugins]]
repo = 'Shougo/neosnippet.vim'
hook_add = '''
"imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)
imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
      \ "\<Plug>(neosnippet_expand_or_jump)"
      \: pumvisible() ? "\<C-n>" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
      \ "\<Plug>(neosnippet_expand_or_jump)"
      \: "\<TAB>"
if has('conceal')
  set conceallevel=2 concealcursor=i
endif
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'Shougo/neco-vim'

[[plugins]]
repo = 'ujihisa/neco-look'

# inoremap <esc>でコンフリクト。escで補完を抜けた後一発でノーマルモードに戻れなくなるためコメントアウト。
#[[plugins]]
#repo = 'Townk/vim-autoclose'

#[[plugins]]
#repo = 'nvim-treesitter/nvim-treesitter'
#hook_add = '''
#lua <<EOF
#require'nvim-treesitter.configs'.setup {
#  highlight = {
#    enable = true,
#    disable = {
#      'ruby',
#    }
#  }
#}
#EOF
#'''


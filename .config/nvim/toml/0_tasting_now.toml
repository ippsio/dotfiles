#[[plugins]]
#repo = 'autozimu/LanguageClient-neovim'
#branch = 'next'
#build = 'bash install.sh'
#hook_add = ''' set hidden
#let g:LanguageClient_serverCommands = {
#    \ 'rust': ['~/.cargo/bin/rustup', 'run', 'stable', 'rls'],
#    \ 'javascript': ['/usr/local/bin/javascript-typescript-stdio'],
#    \ 'javascript.jsx': ['tcp://127.0.0.1:2089'],
#    \ 'python': ['pyls'],
#    \ '#ruby': ['~/.rbenv/shims/solargraph', 'stdio'],
#    \ }
#
#nnoremap <silent> K :call LanguageClient#textDocument_hover()<CR>
#nnoremap <silent> gd :call LanguageClient#textDocument_definition()<CR>
#nnoremap <silent> <F2> :call LanguageClient#textDocument_rename()<CR>
#'''

[[plugins]]
repo = 'Shougo/echodoc.vim'
hook_add='''
  set cmdheight=2
  " Option 4:
  " Or, you could use neovim's floating text feature.
  "
  let g:echodoc#enable_at_startup = 1
  let g:echodoc#type = 'floating'
  " To use a custom highlight for the float window,
  " change Pmenu to your highlight group
  highlight link EchoDocFloat Constant

  " Option 5:
  " Or, you could use vim's popup window feature.
  let g:echodoc#enable_at_startup = 1
  let g:echodoc#type = 'popup'
  " To use a custom highlight for the popup window,
  " change Pmenu to your highlight group
  highlight link EchoDocPopup Pmenu
'''

[[plugins]]
repo = 'davidhalter/jedi-vim'
on_ft = 'python'
hook_add = '''
set completeopt=menuone                        " 補完候補を呼び出すとき常にポップアップメニューを使う
autocmd! User jedi-vim call s:jedivim_hook()   " vim-plugの遅延ロード呼び出し
function! s:jedivim_hook()              " jedi-vimを使うときだけ呼び出す処理を関数化
  let g:jedi#auto_initialization    = 0 " 自動で実行される初期化処理を無効
  let g:jedi#auto_vim_configuration = 0 " 'completeopt' オプションを上書きしない
  let g:jedi#popup_on_dot           = 0 " ドット(.)を入力したとき自動で補完しない
  let g:jedi#popup_select_first     = 0 " 補完候補の1番目を選択しない
  let g:jedi#show_call_signatures   = 0 " 関数の引数表示を無効(ポップアップのバグを踏んだことがあるため)
  autocmd FileType python setlocal omnifunc=jedi#completions   " 補完エンジンはjediを使う
endfunction
'''

[[plugins]]
repo = 'Shougo/neosnippet.vim'
hook_add = '''
"imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)
imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
      \ "\<Plug>(neosnippet_expand_or_jump)"
      \: pumvisible() ? "\<C-n>" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
      \ "\<Plug>(neosnippet_expand_or_jump)"
      \: "\<TAB>"
if has('conceal')
  set conceallevel=2 concealcursor=i
endif
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'


# inoremap <esc>でコンフリクト。escで補完を抜けた後一発でノーマルモードに戻れなくなるためコメントアウト。
#[[plugins]]
#repo = 'Townk/vim-autoclose'

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
hook_add ='''
lua <<EOF
require'nvim-treesitter.configs'.setup {
  highlight = {
    enable = true,
    disable = { }
  }
}
EOF
'''

[[plugins]]
repo='thinca/vim-quickrun'
hook_add = '''
  nnoremap <f5> :QuickRun<CR>
  vnoremap <f5> :QuickRun<CR>
  nnoremap <expr><silent> <C-c> quickrun#is_running() ? quickrun#sweep_sessions() : "<C-c>"

  let g:quickrun_config = {
  \ "_" : {
  \  "runner" : "vimproc",
  \  "runner/vimproc/updatetime" : 60,
  \  "outputter/buffer/split" : "botright 8sp",
  \  "outputter/buffer/close_on_empty" : 1
  \  },
  \ }


  " let g:quickrun_config = {
  " \ "_" : {
  " \  "runner" : "vimproc",
  " \  "runner/vimproc/updatetime" : 60,
  " \  "outputter" : 'error',
  " \  "outputter/error/success" : 'buffer',
  " \  "outputter/error/error"   : 'quickfix',
  " \  "outputter/buffer/split" : "botright 8sp",
  " \  "outputter/buffer/close_on_empty" : 1
  " \  },
  " \ }
'''


# 対応する括弧をいいかんじにする
[[plugins]]
repo='itchyny/vim-parenmatch'
hook_add='''
let g:loaded_matchparen = 1
'''

# カーソル下の単語に線を引く。
[[plugins]]
repo='itchyny/vim-cursorword'

[[plugins]]
repo = 'rhysd/accelerated-jk'
on_map = {n = '<Plug>'}
hook_add = '''
  let g:accelerated_jk_acceleration_table = [7,12,17,21,24,26,28,30]
  nmap <silent>j <Plug>(accelerated_jk_gj)
  nmap <silent>k <Plug>(accelerated_jk_gk)
'''

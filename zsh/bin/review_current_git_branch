#!/usr/bin/env zsh

arg_verbose=$(for arg in "$@"; do [[ "${arg}" =~ "--verbose" ]] && echo "${arg}"; done;)
_fg() { printf "\e[38;5;%dm" "$1"; }
_bg() { printf "\e[48;5;%dm" "$1"; }
_verbose() { [[ ! -z "${arg_verbose}" ]] && return 0 || return 1; }
_echo() { ARG_COLOR=$2; printf "\e[m%s" "${ARG_COLOR}"; echo -n "$1"; printf "\e[m\n"; }

[ ! $(git rev-parse --is-inside-work-tree 2>/dev/null) ] && echo "Not a git repository." && return

MERGE_BASE_BRANCH=$(fzf_git_branch origin_first_local_last)
[[ -z "${MERGE_BASE_BRANCH}" ]] && echo "Bye." && return
MERGE_BASE_LONG_HASH="$(git merge-base ${MERGE_BASE_BRANCH} HEAD)"
MERGE_BASE_HASH=$(git rev-parse --short "${MERGE_BASE_LONG_HASH}")
CURRENT_BRANCH=$(git branch --contains| tr -d "* ")

_COLOR_LABEL="$(_fg 187)$(_bg 100)"
_COLOR_COMMAND="$(_fg 245)$(_bg 234)"
while true; do
  clear
  # branchs
  _echo "[branches]" "${_COLOR_LABEL}"
  _echo " [${MERGE_BASE_BRANCH}] <= [${CURRENT_BRANCH}]"

  # merge-base
  _echo "[merge-base-hash]" "${_COLOR_LABEL}"
  _verbose && _echo " git rev-parse --short \$(git merge-base ${MERGE_BASE_BRANCH} HEAD)" "${_COLOR_COMMAND}"
  _echo " ${MERGE_BASE_HASH}"

  # git log
  local HASH="%C($(git config --get color.diff.commit))%h%Creset"
  local COMMIT_DATE="%cd"
  local AUTHOR="%C(187 17)%an%Creset"
  local SUBJECT="%s"
  local COMMITS_COUNT_LAST=3
  _echo "[git log]" "${_COLOR_LABEL}"
  _CMD="git --no-pager log --oneline ${MERGE_BASE_HASH}...HEAD --reverse --oneline -${COMMITS_COUNT_LAST}"
  _CMD+=" --date=format-local:'%Y/%m/%d %H:%M'"
  _CMD+=" --pretty=format:\" ${HASH} ${COMMIT_DATE} ${AUTHOR} ${SUBJECT}\""
  _CMD+=" --abbrev-commit"
  _verbose && _echo " ${_CMD}" "${_COLOR_COMMAND}"
  eval "${_CMD}"; echo

  # (total commit count)
  _CMD="git --no-pager log --oneline ${MERGE_BASE_HASH}...HEAD| wc -l| tr -d ' '"
  _verbose && _echo " ${_CMD}" "${_COLOR_COMMAND}"
  eval "${_CMD}"| xargs -I {} echo '({} commits in total.)'

  # git diff --stat
  _echo "[git diff --stat]" "${_COLOR_LABEL}"
  _CMD="git diff --stat ${MERGE_BASE_HASH}"
  _verbose && _echo " ${_CMD}" "${_COLOR_COMMAND}"
  eval "${_CMD}"

  # command
  _echo "[command]" "${_COLOR_LABEL}"
  _echo " 1 [enter]: with fzf + nvim." "$(_fg 49)"
  _echo " 2 (t)ig  : tig ${MERGE_BASE_HASH}...HEAD" "$(_fg 49)"
  _echo " 3 (d)iff : git diff ${MERGE_BASE_HASH} | nvim -R" "$(_fg 49)"
  _echo " 4 (d)iff : git diff ${MERGE_BASE_HASH} --unified=0| nvim -R" "$(_fg 49)"
  echo -n " > "
  read REPLY
  case "${REPLY}" in
    1|v|vim|) fzf_git_diff "${MERGE_BASE_HASH}" "enter" ;;
    2|t|tig ) tig ${MERGE_BASE_HASH}...HEAD ;;
    3|d|diff) git diff ${MERGE_BASE_HASH} | nvim -R ;;
    4|d|diff) git diff ${MERGE_BASE_HASH} --unified=0 | nvim -R ;;
  esac
done

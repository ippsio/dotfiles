# ======================
# color setting
# ======================

# NOTE https://github.com/jonas/tig/blob/master/tigrc
# color part text-color background-color  style
color default           default default
color 'Author: '        241     default
color 'AuthorDate: '    241     default
color 'Commit: '        241     default
color 'CommitDate: '    241     default
color 'Merge: '          45     default bold
color 'Date: '          241     default

color date              39      17
color graph-commit      161     default
color cursor            52     202     bold
color main-tracked      105     default bold
color title-focus       234     250
color title-blur        234     250
color author 79 default

color diff-stat        190      18      bold reverse
color diff-index        25      17      reverse
color "+++ "            25      17      reverse
color "--- "            25      17      reverse
color "+"               47      24
color " +"              47      24
color "-"              203      53
color " -"             203      53
color diff-header       45      18      bold reverse
color diff-chunk       190      17

# delimiterは、set wrap-lines = yesの時に、1画面に収まりきらなかった文字を次の行に表示する際
# 前の行からの続きであることを意味する「+」マークの事。
color delimiter        8     247

# ======================
# 単語単位で差分をハイライトできるように
# ======================
set diff-highlight = true

# ======================
# 各viewの表示
# ======================
set main-view   = date id author:email-user commit-title:graph=yes,refs=yes
set blame-view  = date:default author:email-user id:yes,color line-number:yes,interval=1 text
set pager-view  = line-number:yes,interval=1 text
set stage-view  = line-number:yes,interval=1 text
set log-view    = line-number:yes,interval=1 text
set blob-view   = line-number:yes,interval=1 text
set diff-view   = line-number:yes,interval=1 text:yes,commit-title-overflow=no

# ======================
# main-viewの表示設定
# ======================
set main-view-date-display = custom
set main-view-date-format = "%m-%d %H:%M"

# ======================
# ビューの分割
# ======================
# ビューを水平方向あるいは垂直方向に分割するかどうか
set vertical-split = auto
# Width of the right-most view in a vertically split display
set split-view-width = 50%
# 水平方向の分割表示時の下のビューの高さ
set split-view-height = 60%

# 長い行をラップするか
set wrap-lines = no
# 行の描画のための文字グラフィックスの種類 [ascii|default|utf-8|<bool>]
set line-graphics = utf-8
# タブごとの空白の数
set tab-size = 2
# diffビュー内の空白の変更を無視するか
set ignore-space = at-eol
# 検索での大文字小文字を無視するか
set ignore-case = true
# diffビューの中で使うdiffオプションの空白で区切られた文字列
set diff-options = -m --first-parent
# マウスサポートを有効にするかどうか
set mouse = true
# 選択された行数をエディタコマンドへ渡すかどうか
set editor-line-number = yes
# リポジトリ内の監視されているファイルへの修正に基づいて、どうやってビューがリフレッシュされるかを設定
set refresh-mode = auto

# User-defined commands
# ---------------------
# These commands allow to run shell commands directly from within Tig.
# Unless otherwise specified, commands are run in the foreground with
# their console output shown (as if '!' was specified). When multiple
# command options are specified their behavior are combined, e.g. "?<git
# commit" will prompt the user whether to execute the command and will
# exit Tig after completion.
#
#   !	Run the command in the foreground with output shown.
#   @	Run the command in the background with no output.
#   ?	Prompt the user before executing the command.
#   +   Run the command synchronously, and echo the first line of output to the status bar.
#   <	Exit Tig after executing the command.
#   >	Re-open Tig instantly in the last displayed view after executing the command.
# set key to page-down/page-up

# ==================================
# カーソル移動
# ==================================
#-------------------------------
# カーソルを１ページ、上下に移動
#-------------------------------
bind generic <C-b> move-page-up
bind generic <C-f> move-page-down
#-------------------------------
# カーソルを１行、上下に移動
#-------------------------------
bind generic <Up>   move-up
bind generic <Down> move-down
bind main    ]      move-down
bind main    [      move-up
#-------------------------------
# 分割されたビューがある時は、分割元を１行、上下に移動
#-------------------------------
bind generic <C-k> previous
bind generic <C-j> next
#-------------------------------
# カーソルを最初/最後の行に移動
#-------------------------------
bind generic g      move-first-line
bind diff    g      :/^---$ # goto file list
bind generic G      move-last-line
bind main    G      move-last-line
#-------------------------------
# diffビューで、前後のハンクに移動
#-------------------------------
bind diff    ]      :/^@@
bind diff    [      :?^@@
#-----------------
# エンター
#-----------------
# vimでは、'o' で何かを開く操作がバインドされてることが多い。
bind main o enter
bind diff o none
#--------------
# grep
#--------------
bind generic E      view-grep

# ==================================
# git コマンド
# ==================================
#--------------
# git fetch
#--------------
bind generic F      ?git fetch %(remote)
bind main    F      ?git fetch %(remote)
# main-viewでは、デフォルトではF は
# 'set main-view-commit-title-refs' のトグルが設定されている。

#--------------
# git pull
#--------------
# bind generic U      ?git pull %(remote)
# でも僕はほぼgit pullは使わない..

#--------------
# git commit
#--------------
bind generic C      !git commit
bind main    C      !git commit

#--------------
# git rebase
#--------------
# main-viewで今のカーソルよりも上（未来）にある全コミットをリベース
# diff-viewで今開いてるよりも上（未来）にある全コミットをリベース
bind main    R !git rebase -i %(commit)~
bind diff    R !git rebase -i %(commit)~

#--------------------------
# うっかりgit pushさせない
#--------------------------
#bind generic P      ?git push -u %(remote) %(repo:head)
bind generic P      none

#------------------------------------------
# コミットハッシュをクリップボードにコピー
#------------------------------------------
# <Hash>とは、#(シャープ)キーのこと。
bind generic <Hash> none
bind generic <Hash> @sh -c "echo %(commit) | pbcopy"
bind main L         !sh -c "echo %(commit) | pbcopy"
bind diff L         !sh -c "echo %(commit) | pbcopy"


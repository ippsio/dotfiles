#!/bin/bash
# -------------------------------------------------------------
# git_log_fzf <commit1> <commit2>
# - commit1: required.
# - commit2: optional.
# -------------------------------------------------------------
range=${1}
file=${2}

_ME=$( [ -L $0 ] && basename $(readlink $0) || basename $0)
_FZF_PROMPT="${_ME} (range=[${range}],file=[$file]) > "
_FZF_HEADER=" (enter: git diff) (ctrl-p: PR) (ctrl-y: yank hash)"

GIT_LOG_CMD="git --no-pager log --graph --author-date-order --oneline --full-history --decorate=full --abbrev-commit --color=always"\
" --date=format-local:'%Y/%m/%d %H:%M(%a)' --pretty=format:'"\
"	"\
"%an	"\
"%s	"\
"%h	"\
"%cd	"\
"%d'"\
" ${range} -- ${file}"

# --diff-merges たちの 違いがあまりわからない...。 diff-merges: 'on', 'first-parent',  'separate' , 'combined' , 'dense-combined'
DIFF_MERGES="first-parent"
GIT_LOG_1_P_CMD="git log -1 --color=always --diff-merges=${DIFF_MERGES} -p --stat --pretty=fuller --abbrev-commit {2} ${file}"
if ( type "diff-highlight" > /dev/null 2>&1 ); then
  GIT_LOG_1_P_CMD="${GIT_LOG_1_P_CMD}| diff-highlight"
fi
#GIT_LOG_P_CMD="${GIT_LOG_P_CMD}| tail -n +2"

# ============================================================================================================================================
# result image of git log.
# ============================================================================================================================================
# *       ippsio  update-d  52618e2 2022/03/03 10:36(木)     (HEAD -> refs/heads/dotfiles, refs/remotes/origin/dotfiles, refs/remotes/origin/HEAD)
# *       ippsio  update-c  2f0fee1 2022/03/03 07:06(木)
# *       ippsio  update-b  46a7e05 2022/03/02 11:46(水)
# *       ippsio  update-a  6ffabe4 2020/04/29 17:51(水)
# ~~~~~~~ ~~~~~~  ~~~~~~~~  ~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# awk-$1  awk-$2  awk-$3    awk-$4  awk-$5                   awk-$6
# fzf-{5} fzf-{4} fzf-{7}   fzf-{2} fzf-{3}                  fzf-{6}

decorate_git_hash="$(decorate -git_hash)"
decorate_git_cd=$(decorate -git_cd)
decorate_git_an="$(decorate -git_an)"
decorate_git_d="$(decorate -git_d)"
decorate_git_s="$(decorate -git_s)"
eval "${GIT_LOG_CMD}" \
  | grep '*' \
  | awk -F '	' \
    -v decorate_git_hash="${decorate_git_hash}" \
    -v decorate_git_cd="$decorate_git_cd" \
    -v decorate_git_an="$decorate_git_an" \
    -v decorate_git_d="$decorate_git_d" \
    -v decorate_git_s="$decorate_git_s" \
    -v reset="\033[0m" \
    -v dim="\033[2m" \
    '{ printf dim }{ printf "%+2s", NR }                                  { printf reset } # awk-NR = fzf-{1} = index no
     { printf "	" }{ printf "%s", decorate_git_hash }     { printf "%s", $4 }{ printf reset } # awk-$4 = fzf-{2} = %h
     { printf "	" }{ printf "%s", decorate_git_cd }{ printf dim }{ printf "%s", $5 }{ printf reset } # awk-$5 = fzf-{3} = %cd
     { printf "	" }{ printf decorate_git_an }              { printf "%s", $2 }{ printf reset } # awk-$2 = fzf-{4} = %an
     { printf "	" }                                    { printf "%s", $1 }                 # awk-$1 = fzf-{5} = commit graph
     { printf "	" }{ printf decorate_git_d }               { printf "%s", $6 }{ printf reset } # awk-$6 = fzf-{6} = %d
     { printf "	" }{ printf decorate_git_s }               { printf "%s", $3 }{ printf reset } # awk-$3 = fzf-{7} = %s
     { printf "\n" }' \
  | fzf --ansi --info=inline --prompt="${_FZF_PROMPT}" --no-clear --tabstop=1 --header="${_FZF_HEADER}" --no-sort --delimiter='\t' \
  --bind "enter:execute(git log -1 -p --stat --diff-merges=${DIFF_MERGES} {2}| nvim -R -c \"set ft=diff nomod nolist nospell nu\" > /dev/tty)" \
  --bind "ctrl-y:execute(echo -n {2}| pbcopy)" \
  --bind "ctrl-/:toggle-preview" \
  --bind "ctrl-p:execute:(git_pr_search_fzf {2})" \
  --preview="
      verbose_color() { printf '\e[38;5;%dm\e[48;5;%dm' 3 235; };
      reset_color() { printf '\e[0m'; };
      verbose_color; echo \"${GIT_LOG_1_P_CMD}\"; reset_color;
      decorate -git_hash;
      echo -n 'commit '; echo -n {2}; reset_color;
      echo -n ' '
      decorate -git_d {6}; reset_color;
      echo;
      eval \"${GIT_LOG_1_P_CMD}\"| tail -n +2;
    " --preview-window=bottom:85%


#!/bin/bash

# rich branch selector.
# -------------------------
( ! is_git_repo ) && echo "Not a git repository. " && exit 1
_ME=$( [ -L $0 ] && basename $(readlink $0) || basename $0)
difference() { (printf '%s\n' $@ | sort -u; printf '%s\n' ${2}) | sort | uniq -u; };

# L1) ローカルブランチ(developのみ)
L1_local_develop_ARGS=$(git branch --list develop| grep -Ev '(HEAD ->|HEAD detached at)'| sed -r 's/[ \*]+//')
# L2) リモートブランチ(origin/developのみ)
L2_remote_develop_ARGS=$(git branch --remotes --list origin/develop| grep -Ev '(HEAD ->|HEAD detached at)'| sed -r 's/[ \*]+//')
# L3) ローカルブランチ(develop以外の全て)
L3_local_without_develop_ARGS="$(git branch| grep -Ev '(HEAD ->|HEAD detached at)'| sed -r 's/[ \*]+//')"
L3_local_without_develop_ARGS=$(difference "${L3_local_without_develop_ARGS}" "${L1_local_develop_ARGS}")
L3_local_without_develop_ARGS=$(difference "${L3_local_without_develop_ARGS}" "${L2_remote_develop_ARGS}")
L3_local_without_develop_ARGS=$(echo "${L3_local_without_develop_ARGS}"| awk '{ printf " " $1 }')
# L4) リモートブランチのうち、ローカルにない存在しないものから、ブランチ名の接頭辞'origin/' を除去しもの。
L4_local_not_checkedout_ARGS=$(git branch --remotes| grep -Ev '(HEAD ->|HEAD detached at)'| sed -r 's/[ \*]+//'| sed -r 's#^origin/##')
L4_local_not_checkedout_ARGS=$(difference "${L4_local_not_checkedout_ARGS}" "${L1_local_develop_ARGS}")
L4_local_not_checkedout_ARGS=$(difference "${L4_local_not_checkedout_ARGS}" "${L3_local_without_develop_ARGS}")
L4_local_not_checkedout_ARGS=$(echo "${L4_local_not_checkedout_ARGS}"| sed -r 's#^#origin/#g'| awk '{ printf " " $1 }')
# L5) リモートブランチ(origin/develop以外の全て)
L5_remote_without_develop_ARGS=$(git branch --remotes| grep -Ev '(HEAD ->|HEAD detached at)'| sed -r 's/[ \*]+//')
L5_remote_without_develop_ARGS=$(difference "${L5_remote_without_develop_ARGS}" "${L2_remote_develop_ARGS}")
L5_remote_without_develop_ARGS=$(echo "${L5_remote_without_develop_ARGS}"| awk '{ printf " " $1 }')

TAGINFO_FIXED='------'
TAGINFO_LOCAL_BRANCH='local+'
TAGINFO_REMOTE_BRANCH='remote'
TAGINFO_NOT_ON_LOCAL='local-'
# git branchコマンドの共通部分
GIT_BRANCH_CMD="git branch --sort=-authordate --color=always --format='%(objectname:short)	%(authordate:format:%Y-%m-%d	%H:%M:%S(%a))	%(authorname)	%(refname:short)	%(subject)'"
L0_hyphen_hyphen="${TAGINFO_FIXED}	xxxxxxxxxx	xxxx-xx-xx	xx:xx:xx(XX)	xxxxxx	-- 	現在の変更を取り消す。"
if [[ ! -z ${L1_local_develop_ARGS} ]]; then
  L1_local_develop=$(eval "${GIT_BRANCH_CMD} --list ${L1_local_develop_ARGS}"| perl -pe "s/^/${TAGINFO_LOCAL_BRANCH}	/")
fi
if [[ ! -z ${L2_remote_develop_ARGS} ]]; then
  L2_remote_develop=$(eval "${GIT_BRANCH_CMD} --remotes --list ${L2_remote_develop_ARGS}"| perl -pe "s/^/${TAGINFO_REMOTE_BRANCH}	/")
fi
if [[ ! -z ${L3_local_without_develop_ARGS} ]]; then
  L3_local_without_develop=$(eval "${GIT_BRANCH_CMD} --list ${L3_local_without_develop_ARGS}"| perl -pe "s/^/${TAGINFO_LOCAL_BRANCH}	/")
fi
if [[ ! -z ${L4_local_not_checkedout_ARGS} ]]; then
  L4_local_not_checkedout=$(eval "${GIT_BRANCH_CMD} --remotes --list ${L4_local_not_checkedout_ARGS}" | perl -pe "s/^/${TAGINFO_NOT_ON_LOCAL}	/"| perl -pe 's#	origin/(.*	)#	\1#')
fi
if [[ ! -z ${L5_remote_without_develop_ARGS} ]]; then
  L5_remote_without_develop=$(eval "${GIT_BRANCH_CMD} --remotes --list ${L5_remote_without_develop_ARGS}" | perl -pe "s/^/${TAGINFO_REMOTE_BRANCH}	/")
fi

GIT_LOG="git log"\
" --oneline "\
" --abbrev-commit"\
" --decorate=full"\
" --date=format-local:'%Y/%m/%d %H:%M:%S'"\
" --pretty=format:'%h	(%cd)	%an	%d	%s'"\
" -13"\
" {7}"
GIT_LOG=$(escape_SQ "${GIT_LOG}")

echo "${L0_hyphen_hyphen}
${L1_local_develop}
${L2_remote_develop}
${L3_local_without_develop}
${L4_local_not_checkedout}
${L5_remote_without_develop}" \
  | perl -pe 's/^[\r\n]+$//' \
  | awk -F '	' \
    -v deco_git_objectname=$(decorate -git_objectname) \
    -v deco_git_authordate=$(decorate -git_authordate) \
    -v deco_git_an=$(decorate -git_an) \
    -v deco_git_refname=$(decorate -git_refname) \
    -v deco_git_s=$(decorate -git_s) \
    '{
       printf "%s",                         "\033[2m"; printf "%+2s", NR; # awk-NR is fzf-{1}: index no
       printf "%s", "	"                     "\033[2m" $1 "\033[0m"; # awk-$1 is fzf-{2}: tag information about the branch.
       printf "%s", "	" deco_git_objectname "\033[2m" $2 "\033[0m"; # awk-$1 is fzf-{3}: %(objectname:short)
       printf "%s", "	" deco_git_authordate "\033[2m" $3 "\033[0m"; # awk-$2 is fzf-{4}: date part of %(authordate)
       printf "%s", "	" deco_git_authordate "\033[2m" $4 "\033[0m"; # awk-$3 is fzf-{5}: time part of %(authordate)
       printf "%s", "	" deco_git_an                   $5 "\033[0m"; # awk-$4 is fzf-{6}: %(authorname)
       printf "%s", "	" deco_git_refname              $6 "\033[0m"; # awk-$5 is fzf-{7}: %(refname:short)
       printf "%s", "	" deco_git_s          "\033[2m" $7 "\033[0m"; # awk-$6 is fzf-{8}: %(subject)
       printf "\n";
     }' \
 | fzf --ansi --prompt="$_ME > " --no-sort --info=inline --tabstop=1 --delimiter="	" --nth=1,2,3,4,6,7 \
   --bind "tab:execute(cd $(git_root); git_log_fzf {7})" \
   --bind "ctrl-l:execute(cd $(git_root); git_log_fzf {7})" \
   --preview="
      cd $(git_root);
      # --------------------------------------------------
      # Git log.
      # --------------------------------------------------
      decorate -verbose_log; echo ${GIT_LOG}; printf '\033[0m';
      echo;
      eval ${GIT_LOG}\
        | awk -F '\t' \
          -v deco_git_hash=$(escape_SQ $(decorate -git_hash)) \
          -v deco_git_cd=$(escape_SQ $(decorate -git_cd)) \
          -v deco_git_an=$(escape_SQ $(decorate -git_an)) \
          -v deco_git_d=$(escape_SQ $(decorate -git_d)) \
          -v deco_git_s=$(escape_SQ $(decorate -git_s)) \
          '{
            if (\"{7}\"!=\"--\") {
              printf \"%2s\", NR;
              printf \"	\"; printf \"%s\", deco_git_hash \$1 \"\033[0m\"; # %h
              printf \"	\"; printf \"%s\", deco_git_cd   \$2 \"\033[0m\"; # (%cd)
              printf \"	\"; printf \"%s\", deco_git_an   \$3 \"\033[0m\"; # %an
              printf \"	\"; printf \"%s\", deco_git_d    \$4 \"\033[0m\"; # %d
                            printf \"%s\", deco_git_s    \$5 \"\033[0m\"; # %s
              printf \"\n\";
            }
          }'
      echo;
      horizontal_line;
     "\
   --preview-window down,15 \
 | awk -F '	' '{ printf "%s", $7; }'


#!/bin/bash
COMMIT_LOG_ROWS=15
( ! is_git_repo ) && echo "Not a git repository. " && exit 1
_ME=$( [ -L $0 ] && basename $(readlink $0) || basename $0)
GIT_BRANCH_CMD="git branch --all --sort=-authordate --color=always --format='%(objectname:short)	%(authordate:format:%Y-%m-%d	%H:%M:%S(%a))	%(authorname)	%(refname:short)	%(subject)'"
GIT_LOG=$(escape_SQ "git log --oneline -$(( ${COMMIT_LOG_ROWS} - 2 )) --abbrev-commit --decorate=full --date=format-local:'%Y/%m/%d %H:%M:%S' --pretty=format:'%h	(%cd)	%an	%d	%s'")
GIT_BRANCH_RESULT=$(eval "${GIT_BRANCH_CMD}")
L_ALL="$(git log --oneline -1| awk '{ gsub(/[0-9a-f]/, "o", $1); print $1 }')	oooo-oo-oo	oo:oo:oo(oo)	ooooooooooooooooooo	-- 	現在の変更を取り消す。
$(echo "${GIT_BRANCH_RESULT}"| grep -E '	(develop|origin/develop)	')
$(echo "${GIT_BRANCH_RESULT}"| grep -E '	(master|origin/master)	')
$(echo "${GIT_BRANCH_RESULT}"| grep -Ev '	(HEAD|origin/HEAD|develop|origin/develop|master|origin/master)	')"
echo "${L_ALL}" | awk -F '	' -v count=$(echo "${L_ALL}"| chop_blank_line| wc -l| tr -d ' ') -v deco_git_objectname=$(decorate -git_objectname) -v deco_git_authordate=$(decorate -git_authordate) \
    -v deco_git_an=$(decorate -git_an) -v deco_git_refname=$(decorate -git_refname) -v deco_git_s=$(decorate -git_s) '{
      if (index($5, "origin/") > 0) { taginfo = "origin"; branchname = substr($5, length("origin/") + 1); } else { taginfo = " local"; branchname = $5; }
      printf "%s", "\033[2m"; printf "(%+2s/%s)", NR, count;
      printf "%s", "	" deco_git_objectname "\033[2m" $1 "\033[0m";
      printf "%s", "	" deco_git_authordate "\033[2m" $2 "	" $3 "\033[0m";
      printf "%-35s", "	" deco_git_an $4 "\033[0m";
      printf "%s", "	" "\033[2m" taginfo "\033[0m";
      printf "%s", "	" deco_git_refname branchname "\033[0m";
      printf "%s", "	" deco_git_s "\033[2m" $6 "\033[0m\n";
    }'| fzf --ansi --prompt="$_ME > " --no-sort --info=inline --tabstop=1 --delimiter="	" --nth=1,5,6,7 \
   --bind "tab:execute(cd $(git_root); git_log_fzf {7})" \
   --bind "ctrl-l:execute(cd $(git_root); git_log_fzf {7})" \
   --preview-window down,15 --preview="cd $(git_root);
             [[ {6} == 'origin' ]] && branch='{6}/{7}' || branch='{7}'
             decorate -verbose_log; echo ${GIT_LOG} "'"${branch}"'"; printf '\033[0m\n';
             eval ${GIT_LOG} "'${branch}'"| awk -F '\t' -v deco_git_hash=$(escape_SQ $(decorate -git_hash)) -v deco_git_cd=$(escape_SQ $(decorate -git_cd)) \
                 -v deco_git_an=$(escape_SQ $(decorate -git_an)) -v deco_git_d=$(escape_SQ $(decorate -git_d)) -v deco_git_s=$(escape_SQ $(decorate -git_s)) '{
                   if (\"{7}\"!=\"--\") {
                     printf \"%2s\", NR;
                     printf \"	\"; printf \"%s\", deco_git_hash \$1 \"\033[0m\"; # %h
                     printf \"	\"; printf \"%s\", deco_git_cd   \$2 \"\033[0m\"; # (%cd)
                     printf \"	\"; printf \"%-35s\", deco_git_an   \$3 \"\033[0m\"; # %an
                     printf \"	\"; printf \"%s\", deco_git_d    \$4 \"\033[0m\"; # %d
                                   printf \"%s\", deco_git_s    \$5 \"\033[0m\n\"; # %s
                   } }' "\
 | awk -F '	' '{ printf "%s", $7; }'


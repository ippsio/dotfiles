#!/bin/bash

start_time_millis=$(epocms)
# 特定の文言を含むコミットを抽出します。
# - q_shell_escaped: 特定の文言
# - range: コミット範囲
# - files: ファイル
q_raw=""
range=""
files=""
while (( $# > 0 )); do
  case $1 in
    --range) range=" $2"; shift ;;
    --) shift; files=$@; break ;;
    *)
      if [[ ! -z "${q_raw}" ]]; then
        echo "Usage: $(basename $0) 'searchword' --range commit1...commit2 -- files"
        exit 1
      else
        q_raw="$1"
      fi
      ;;
  esac
  shift
done
if [[ -z "${q_raw}" ]]; then
  echo "検索文字を入力して下さい"
  exit 0
fi

BS="\\"
q_shell_escaped=${q_raw}
q_shell_escaped=${q_shell_escaped//\\/${BS}\\}
q_shell_escaped=${q_shell_escaped//\`/${BS}\`}
q_shell_escaped=${q_shell_escaped//\~/${BS}\~}
q_shell_escaped=${q_shell_escaped//\!/${BS}\!}
q_shell_escaped=${q_shell_escaped//\@/${BS}\@}
q_shell_escaped=${q_shell_escaped//\#/${BS}\#}
q_shell_escaped=${q_shell_escaped//\$/${BS}\$}
q_shell_escaped=${q_shell_escaped//\%/${BS}\%}
q_shell_escaped=${q_shell_escaped//\^/${BS}\^}
q_shell_escaped=${q_shell_escaped//\&/${BS}\&}
q_shell_escaped=${q_shell_escaped//\*/${BS}\*}
q_shell_escaped=${q_shell_escaped//\(/${BS}\(}
q_shell_escaped=${q_shell_escaped//\)/${BS}\)}
q_shell_escaped=${q_shell_escaped//\-/${BS}-}
q_shell_escaped=${q_shell_escaped//\+/${BS}+}
q_shell_escaped=${q_shell_escaped//\_/${BS}_}
q_shell_escaped=${q_shell_escaped//\=/${BS}=}
q_shell_escaped=${q_shell_escaped//\{/${BS}\{}
q_shell_escaped=${q_shell_escaped//\}/${BS}\}}
q_shell_escaped=${q_shell_escaped//\[/${BS}[}
q_shell_escaped=${q_shell_escaped//\]/${BS}]}
q_shell_escaped=${q_shell_escaped//\|/${BS}|}
q_shell_escaped=${q_shell_escaped//\?/${BS}?}
q_shell_escaped=${q_shell_escaped//\./${BS}.}
q_shell_escaped=${q_shell_escaped//\,/${BS},}
q_shell_escaped=${q_shell_escaped//\//${BS}/}
q_shell_escaped=${q_shell_escaped//\</[${BS}\<]}
q_shell_escaped=${q_shell_escaped//\>/[${BS}\>]}

fzf_prompt="[$(basename $0)] in=${range}, files=${files}, q_raw=${q_raw}, q_shell_escaped=${q_shell_escaped}"
printf "%s\n" "${fzf_prompt}"

git_log_g_res=$(git --no-pager log --date=format:'%Y-%m-%d %H:%M' --pretty='%h%x09%ad%x09%an%x09%s' -G"${q_shell_escaped}"${range} -- ${files})
if [[ -z "${git_log_g_res}" ]]; then
  echo "not found."
  exit 1
fi
git_log_g_res_size=$(printf "%s" "${git_log_g_res}"| grep -Evc '^$')

(
  git_log_g_res_idx=0
  IFS=$'\n'
  for git_log_g_res_1 in $(echo "${git_log_g_res}"); do
    git_log_g_res_idx=$(( git_log_g_res_idx + 1 ))
    single_commit_start_time_millis=$(epocms)
    # １コミットの各要素を取得します(%h, %ad, %an, %s)。
    git_log_h=$(echo "${git_log_g_res_1}"| awk -F '\t' '{ print $1 }')
    git_log_ad=$(echo "${git_log_g_res_1}"| awk -F '\t' '{ printf "%s", $2 }')
    git_log_an=$(echo "${git_log_g_res_1}"| awk -F '\t' '{ printf "%s", $3 }')
    git_log_s=$(echo "${git_log_g_res_1}"| awk -F '\t' '{ printf "%s", $4 }')
    if ( echo "${git_log_s}"| grep -E '\(#[0-9]+\)"{0,1}$'>/dev/null 2>&1 ); then
      pull_request_no=$(echo "${git_log_s}"| sed -E 's/^.*\(#/(#/'| sed -E 's/"$//')
    else
      pull_request_no="(#.....)"
    fi

    string_buffer=""
    git_log_patch_filename=""
    line_to_process=$(git --no-pager log --oneline -1 --patch --unified=0 ${git_log_h} -- ${files}| tail +2| grep -E "(^diff --git|^[\+|\-].*${q_shell_escaped})"| grep -Ev '^([\+]{3} b/|[\-]{3} a/)')
    for git_log_patch_res_1 in $(printf "%s" "${line_to_process}"); do
      if ( echo "${git_log_patch_res_1}"| grep -E "^diff --git a/.* b/.*">/dev/null 2>&1 ); then
        git_log_patch_filename_a=$(echo "${git_log_patch_res_1}"| sed -E 's/^(diff --git )a\/(.*) b\/(.*)$/\2/')
        git_log_patch_filename_b=$(echo "${git_log_patch_res_1}"| sed -E 's/^(diff --git )a\/(.*) b\/(.*)$/\3/')
        git_log_patch_filename=$(echo "${git_log_patch_filename_a}"$'\n'"${git_log_patch_filename_b}"| uniq| xargs echo)
      else
        if ( printf '%s\n' "${git_log_patch_res_1}"| grep -E "${q_shell_escaped}">/dev/null 2>&1 ); then
          git_log_patch_res_1_head1="${git_log_patch_res_1:0:1}"
          if [[ "${git_log_patch_res_1_head1}" == "+" ]]; then
            readable_label="追加"
          elif [[ "${git_log_patch_res_1_head1}" == "-" ]]; then
            readable_label="削除"
          fi
          string_buffer+="${git_log_h}	${pull_request_no}	${git_log_ad}	${git_log_an}	${git_log_patch_filename}	|${readable_label}|${git_log_patch_res_1}"$'\n'
        fi
      fi
    done

    printf "%s\n" "${git_log_h}	${pull_request_no}	${git_log_ad}	${git_log_an}	${git_log_s}"
    printf "%s\n" "${string_buffer}"| grep -Ev "^$"
    time_millis=$(epocms)
    single_commit_elapsed_time_millis=$(( time_millis - single_commit_start_time_millis ))
    elapsed_time_millis=$(( time_millis - start_time_millis ))
    printf "... %dms (%s/%s) elapsed:%dms \n" "${single_commit_elapsed_time_millis}" "${git_log_g_res_idx}" "${git_log_g_res_size}" "${elapsed_time_millis}"
  done
  elapsed_time_millis=$(( $(epocms) - start_time_millis ))
  echo "検索完了です(${git_log_g_res_size}commits, ${elapsed_time_millis}ms)"
)| grep -E --color=always "$|${q_shell_escaped}"| fzf\
     --delimiter="\t"\
     --tabstop=2\
     --ansi\
     --info=inline\
     --prompt="${fzf_prompt} "\
     --header="${git_log_g_res_size}commits hits..."\
     --bind="enter:execute(tig {1} -1 -G\"${q_shell_escaped}\" -- {5})"\
     --bind="#:execute(printf {1}| pbcopy; printf 'ハッシュ値({1})をコピーしましたよ。'; read )"


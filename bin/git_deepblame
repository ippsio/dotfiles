#!/bin/bash
q=""
range=""
files=""
while (( $# > 0 )); do
  case $1 in
    --range) range=" $2"; shift ;;
    --) shift; files=$@; break ;;
    *) q="$1" ;;
  esac
  shift
done
args="in=[${range}],files=[${files}],q=[${q}]"

q=${q//\\/\\\\}
q=${q//|/\\|}
q=${q//)/\\)}
q=${q//[/\\[}
q=${q//]/\\]}
q=${q//\`/\\\`}
q=${q//./\\.}
q=${q//?/\\\?}
q=${q//\+/\\\+}
q=${q//\*/\\*}
q=${q//\^/\\^}
q=${q//$/\\$}

# 特定の文言を含むコミットを抽出します。
# - q: 特定の文言
# - range: コミット範囲
# - files: ファイル
git_log_g_cmd="git --no-pager log --date=format:'%Y-%m-%d %H:%M' --pretty='%h%x09%ad%x09%an%x09%s' -G'${q}'${range} -- ${files}"
git_log_g_res=$(eval ${git_log_g_cmd})
if [[ -z "${git_log_g_res}" ]]; then
  echo "not found."
  exit 1
fi

IFS=$'\n'
for git_log_g_res_1 in $(echo "${git_log_g_res}"); do
  # １コミットの各要素を取得します(%h, %ad, %an, %s)。
  git_log_h=$(echo "${git_log_g_res_1}"| awk -F '\t' '{ print $1 }')
  git_log_ad=$(echo "${git_log_g_res_1}"| awk -F '\t' '{ printf "%s", $2 }')
  git_log_an=$(echo "${git_log_g_res_1}"| awk -F '\t' '{ printf "%s", $3 }')
  git_log_s=$(echo "${git_log_g_res_1}"| awk -F '\t' '{ printf "%s", $4 }')
  if ( echo "${git_log_s}"| grep -E '\(#[0-9]+\)"{0,1}$'>/dev/null 2>&1 ); then
    pull_request_no=$(echo "${git_log_s}"| sed -E 's/^.*\(#/(#/'| sed -E 's/"$//')
  else
    pull_request_no="(#.....)"
  fi

  string_buffer=""
  git_log_patch_filename=""
  git_log_patch_cmd="git --no-pager log --oneline -1 --patch --unified=0 ${git_log_h} -- ${files}| tail +2"
  git_log_patch_res=$(eval "${git_log_patch_cmd}")
  for git_log_patch_res_1 in $(echo "${git_log_patch_res}"); do
    if ( echo "${git_log_patch_res_1}"| grep -E "^diff --git a/.* b/.*">/dev/null 2>&1 ); then
      git_log_patch_filename_a=$(echo "${git_log_patch_res_1}"| sed -E 's/^(diff --git )a\/(.*) b\/(.*)$/\2/')
      git_log_patch_filename_b=$(echo "${git_log_patch_res_1}"| sed -E 's/^(diff --git )a\/(.*) b\/(.*)$/\3/')
      git_log_patch_filename=$(echo "${git_log_patch_filename_a}"$'\n'"${git_log_patch_filename_b}"| uniq| xargs echo)
    elif ( printf "%s" "${git_log_patch_res_1}"| grep -E "${q}">/dev/null 2>&1 ); then
      string_buffer+="${git_log_h}	${pull_request_no}	${git_log_ad}	${git_log_an}	${git_log_patch_filename}	|${git_log_patch_res_1}"$'\n'
    fi
  done

  printf "%s\n" "${git_log_h}	${pull_request_no}	${git_log_ad}	${git_log_an}	${git_log_s}"
  printf "%s\n" "${string_buffer}"| grep -Ev "^$"
  echo "--"
done| grep -E --color=always "$|${q}"| fzf --delimiter="\t" --tabstop=2 --ansi --info=inline --prompt="[$(basename $0)] ${args}" --header="${git_log_cmd1}" --bind="enter:execute(tig {1} -1 -G'${q}' -- {5})" --bind="#:execute(printf {1}| pbcopy; printf 'ハッシュ値({1})をコピーしましたよ。'; read )"


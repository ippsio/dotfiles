#!/bin/bash
! $(set -x; is_git_repo) && echo "Not a git repository." && exit 1

args=(); for arg in "$@"; do [[ "${arg}" == "--verbose" ]] && arg_verbose="${arg}" || args=("${args[@]}" "${arg}"); done
commit1=${args[0]}

info() {   printf "\e[m\e[38;5;%dm\e[48;5;%dm" 220 237; echo -n "$1"; printf "\e[m"; }
infoln() { printf "\e[m\e[38;5;%dm\e[48;5;%dm" 220 237; echo -n "$1"; printf "\e[m"; echo; }
label() {  printf "\e[m\e[38;5;%dm\e[48;5;%dm" 187 100; echo -n "$1"; printf "\e[m"; }
verbose() { [[ ! -z "${arg_verbose}" ]] && (printf "\e[m\e[38;5;%dm\e[48;5;%dm" 245 234; echo -n "$1"; printf "\e[m"; echo;); }

CURRENT_BRANCH=$(set -x; git_branch_current)
REVIEW_JSON=$(set -x; git_get_review_json "${CURRENT_BRANCH}" "${commit1}")
MERGE_BASE_BRANCH=$(echo "${REVIEW_JSON}"| jq -r '.base')
[[ "${MERGE_BASE_BRANCH}" == "" ]] && echo "MERGE_BASE_BRANCH empty. Bye" && exit 1
MERGE_BASE_BRANCH="origin/${MERGE_BASE_BRANCH}"
MERGE_BASE_COMMIT=$(git rev-parse --short "$(git merge-base ${MERGE_BASE_BRANCH} HEAD)")
PR_NO=$(echo "${REVIEW_JSON}"| jq '.number')

GIT_LOG_BASE_CMD="git --no-pager log --oneline --abbrev-commit --date=format-local:'%Y/%m/%d %H:%M' --pretty=format:'"\
"%C($(git config --get color.diff.commit))%h%Creset "\
"%cd "\
"%C(169)%an%Creset "\
"%s"\
"' --color=always"
GIT_LOG_CMD="${GIT_LOG_BASE_CMD} ${MERGE_BASE_COMMIT}...HEAD"
GIT_LOG_1_CMD="${GIT_LOG_BASE_CMD} ${MERGE_BASE_COMMIT} -1"
GIT_LOG_3_CMD="${GIT_LOG_BASE_CMD} ${MERGE_BASE_COMMIT}...HEAD -3 --full-history --simplify-merges"
GIT_DIFF_STAT_CMD="git diff --stat=$(( ($(tput cols) / 10) * 10 )) --stat-name-width=160 -p ${MERGE_BASE_COMMIT}"
COMMANDS=$(cat << EOF
1, edit (neovim)     - 	git_diff_fzf "${MERGE_BASE_BRANCH}"
2, git log           - 	git_log_fzf  "${MERGE_BASE_BRANCH}.."
3, tig               - 	tig          "${MERGE_BASE_BRANCH}.."
5, git diff          - 	git diff     "${MERGE_BASE_BRANCH}..." | nvim -R
4, git diff(delta)   - 	git -c delta.side-by-side=true diff "${MERGE_BASE_BRANCH}..."
6, git diff(compact) - 	git diff     "${MERGE_BASE_BRANCH}..." --unified=0| nvim -R
7, pull git branch   - 	set -x; git fetch origin --prune; git merge --ff; set +x; read
8, open pull request - 	open https://github.com/$(git_reponame)/pull/${PR_NO}
9, show pull request - 	git_pull_request_search_fzf "${CURRENT_BRANCH}"
EOF
)

while true; do clear
  label "[pwd]";
  infoln " $(pwd| sed -e "s#$HOME#~#")"
  label "[merge_base_branch_info]";
  info "$(echo \"${REVIEW_JSON}\"| awk -F '\n' '{ print $0 }')"; echo

  label "[branches]"
  infoln " ${MERGE_BASE_BRANCH}<=${CURRENT_BRANCH}"

  label "[merge-base]"
  verbose "${GIT_LOG_1_CMD}"
  infoln " $(eval ${GIT_LOG_1_CMD})"
  horizontal_line; echo


  label "[git log]"
  verbose " ${GIT_LOG_CMD}"
  infoln " $( (eval ${GIT_LOG_CMD}; echo )| wc -l| tr -d ' ') commits."
  verbose " ${GIT_LOG_3_CMD}"
  eval "(${GIT_LOG_3_CMD};echo)"| awk '{ printf "%+2s %s\n", NR, $0 }'
  horizontal_line; echo

  label "[git diff --stat]"
  GIT_DIFF_NUMSTAT="git diff --numstat ${MERGE_BASE_COMMIT}..."
  verbose " ${GIT_DIFF_NUMSTAT}"
  files=$(eval "${GIT_DIFF_NUMSTAT}" \
    | awk -v deco="$(decorate)" '
    # ------------------------------------------------------------------------------------
    # Once make an associative array(deco_of).
    # ------------------------------------------------------------------------------------
    BEGIN {
      split(deco, deco_kv_ar, "/");
      for (i=0; i<length(deco_kv_ar); i++) {
        split(deco_kv_ar[i], kv, "=");
        deco_of[""kv[1]""]=kv[2]
      }
      insertions=0
      deletions=0
    }
    # ------------------------------------------------------------------------------------
    # Obtain file extension.
    # ------------------------------------------------------------------------------------
    {
      fn=$3;
      if (fn==NULL) { next };
      len=split(fn, parts, /[\.\/]/);
      ext="." parts[len];
    }
    # ------------------------------------------------------------------------------------
    {
      insertion+=$1
      deletion+=$2
      if (NR <= 15) {
        printf "%2s", NR; printf "\033[0m";
        printf "  ";
        printf "%s", deco_of["diff_plus"]; printf "%+4s", "+" $1; printf "\033[0m";
        printf "|";
        printf "%s", deco_of["diff_minus"]; printf "%-4s", $2 "-"; printf "\033[0m";
        printf "  ";
        printf "%s", deco_of[ext]; printf "%s", $3; printf "\033[0m";
        printf "\n";
      }
    }
    END {
      if (NR >= 15) {
        printf " :\n"
      }
      printf "%s", ",-------------------------------------\n"
      printf "| %s files changed, ", NR
      printf "%s", deco_of["diff_plus"]; printf "%+4s", "(+)" insertion; printf "\033[0m";
      printf "|";
      printf "%s", deco_of["diff_minus"]; printf "%-4s", deletion "(-)"; printf "\033[0m";
      printf "", NR, insertion, deletion
      printf "", NR, insertion, deletion
      printf "%s", "\n"
    }
  ')

  GIT_DIFF_STAT_CNT=$(echo "${GIT_DIFF_STAT}"| wc -l| tr -d ' ')
  echo "${GIT_DIFF_STAT}"
  echo "${files}"
  #[[ ${GIT_DIFF_STAT_CNT} -ge 15 ]] && echo " :" && echo "${GIT_DIFF_STAT}"| tail -n 1
  horizontal_line; echo

  # command selector
  ANS=$(echo "${COMMANDS}"| fzf --sync --disabled --info=hidden --height=11 --prompt="COMMAND> " --bind "j:down" --bind "k:up" | awk -F '\t' '{ print $2 }')
  [[ -z ${ANS} ]] && exit || eval ${ANS}
done

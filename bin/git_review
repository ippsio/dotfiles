#!/bin/bash
! $(is_git_repo) && echo "Not a git repository." && exit 1

args=(); for arg in "$@"; do [[ "${arg}" == "--verbose" ]] && arg_verbose="${arg}" || args=("${args[@]}" "${arg}"); done
commit1=${args[0]}

info() {   printf "\e[m\e[38;5;%dm\e[48;5;%dm" 220 237; echo -n "$1"; printf "\e[m"; }
infoln() { printf "\e[m\e[38;5;%dm\e[48;5;%dm" 220 237; echo -n "$1"; printf "\e[m"; echo; }
label() {  printf "\e[m\e[38;5;%dm\e[48;5;%dm" 187 100; echo -n "$1"; printf "\e[m"; }
verbose() { [[ ! -z "${arg_verbose}" ]] && (printf "\e[m\e[38;5;%dm\e[48;5;%dm" 245 234; echo -n "$1"; printf "\e[m"; echo;); }

CURRENT_BRANCH=$(git_branch_current)
MERGE_BASE_INFO=$(git_get_merge_base_info "${CURRENT_BRANCH}" "${commit1}")
MERGE_BASE_BRANCH=$(echo "${MERGE_BASE_INFO}"| grep "MERGE_BASE_BRANCH="| awk -F '=' '{ print $2 }'| sed -e 's#^origin/##'| sed -e 's/ *//g')
[[ "${MERGE_BASE_BRANCH}" == "" ]] && echo "MERGE_BASE_BRANCH empty. Bye" && exit 1
MERGE_BASE_BRANCH=origin/${MERGE_BASE_BRANCH}
MERGE_BASE_COMMIT=$(git rev-parse --short "$(git merge-base ${MERGE_BASE_BRANCH} HEAD)")
PR_NO=$(echo "${MERGE_BASE_INFO}"| grep "PR_NO="| awk -F '=' '{ print $2 }')

GIT_LOG_BASE_CMD="git --no-pager log --oneline --abbrev-commit --date=format-local:'%Y/%m/%d %H:%M' --pretty=format:'"\
"%C($(git config --get color.diff.commit))%h%Creset "\
"%cd "\
"%C(169)%an%Creset "\
"%s"\
"' --color=always"
GIT_LOG_CMD="${GIT_LOG_BASE_CMD} ${MERGE_BASE_COMMIT}...HEAD"
GIT_LOG_1_CMD="${GIT_LOG_BASE_CMD} ${MERGE_BASE_COMMIT} -1"
GIT_LOG_3_CMD="${GIT_LOG_BASE_CMD} ${MERGE_BASE_COMMIT}...HEAD -3 --full-history --simplify-merges"
#GIT_DIFF_STAT_CMD="git diff ${MERGE_BASE_COMMIT} --stat-graph-width=$(( $(tput cols) / 1 )) --color=always"
GIT_DIFF_STAT_CMD="git diff ${MERGE_BASE_COMMIT} --stat=$(( $(tput cols) / 1 )) --color=always"
COMMANDS=$(cat << EOF
1, edit (neovim)     - 	git_diff_fzf "${MERGE_BASE_BRANCH}"
2, git log           - 	git_log_fzf  "${MERGE_BASE_BRANCH}.."
3, tig               - 	tig          "${MERGE_BASE_BRANCH}.."
4, git diff          - 	git diff     "${MERGE_BASE_BRANCH}..." | nvim -R
5, git diff(compact) - 	git diff     "${MERGE_BASE_BRANCH}..." --unified=0| nvim -R
6, pull git branch   - 	set -x; git fetch origin --prune; git merge --ff; set +x; read
7, open pull request - 	open https://github.com/$(git_reponame)/pull/${PR_NO}
8, show pull request - 	git_pr_search_fzf "${CURRENT_BRANCH}"
EOF
)

while true; do clear
  label "[merge_base_branch_info]";
  for e in $(echo "${MERGE_BASE_INFO}"); do echo -n " {"; info "${e}"; echo -n "}"; done; echo

  label "[branches]"
  infoln " ${MERGE_BASE_BRANCH}<=${CURRENT_BRANCH}"

  label "[merge-base]"
  verbose "${GIT_LOG_1_CMD}"
  infoln " $(eval ${GIT_LOG_1_CMD})"

  label "[git log]"
  verbose " ${GIT_LOG_CMD}"
  infoln " $( (eval ${GIT_LOG_CMD}; echo )| wc -l| tr -d ' ') commits."
  verbose " ${GIT_LOG_3_CMD}"
  eval "(${GIT_LOG_3_CMD};echo)"| awk '{ printf "%+2s %s\n", NR, $0 }'

  label "[git diff --stat]"
  verbose " ${GIT_DIFF_STAT_CMD}"
  GIT_DIFF_STAT=$(eval "${GIT_DIFF_STAT_CMD}" \
    | awk '
      {
        if ($0 !~ / files changed/ && NR < 15) {
          { printf "%+2s ", NR };
          { if($0 ~ /\.rb /) printf "\033[38;5;%dm", 170 }
          { if($0 ~ /\.coffee /) printf "\033[38;5;%dm", 130 }
          { if($0 ~ /\.erb /) printf "\033[38;5;%dm", 168 }
          { if($0 ~ /\.js /) printf "\033[38;5;%dm", 117 }
          { if($0 ~ /\.scss /) printf "\033[38;5;%dm", 125 }
          { printf "%s\n", $0 }
          { printf "\033[0m"; };
        }
      }
      END {
        if (NR >= 15) { printf " :\n" }
        gsub(" insertions", ""); gsub(" deletions", ""); printf "*SUMMARY=>%s", $0
      }
    ')
  GIT_DIFF_STAT_CNT=$(echo "${GIT_DIFF_STAT}"| wc -l| tr -d ' ')
  echo;
  echo "${GIT_DIFF_STAT}"
  #[[ ${GIT_DIFF_STAT_CNT} -ge 15 ]] && echo " :" && echo "${GIT_DIFF_STAT}"| tail -n 1

  label "[pwd]";
  infoln " $(pwd| sed -e "s#$HOME#~#")"

  # command selector
  ANS=$(echo "${COMMANDS}"| fzf --disabled --info=hidden --height=11 --prompt="COMMAND> " --bind "j:down" --bind "k:up" | awk -F '\t' '{ print $2 }')
  [[ -z ${ANS} ]] && exit || eval ${ANS}
done

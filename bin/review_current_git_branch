#!/bin/bash
! $(is_git_repository) && echo "Not a git repository." && exit 1

args=(); for arg in "$@"; do [[ "${arg}" == "--verbose" ]] && arg_verbose="${arg}" || args=("${args[@]}" "${arg}"); done
commit1=${args[0]}

_fg() { printf "\e[38;5;%dm" "$1"; }
_bg() { printf "\e[48;5;%dm" "$1"; }
_echo_info() { printf "\e[m%s" "$(_fg 220)$(_bg 237)"; echo -n "$1"; printf "\e[m"; echo; }
_echo_verbose() { [[ ! -z "${arg_verbose}" ]] && (printf "\e[m%s" "$(_fg 245)$(_bg 234)"; echo -n "$1"; printf "\e[m"; echo;); }
_echo_label() { printf "\e[m%s" "$(_fg 187)$(_bg 100)"; echo -n "$1"; printf "\e[m"; }

CURRENT_BRANCH=$(current_git_branch)
MERGE_BASE_INFO=$(git_get_merge_base_info "${CURRENT_BRANCH}" "${commit1}")
MERGE_BASE_BRANCH=$(echo "${MERGE_BASE_INFO}"| grep "MERGE_BASE_BRANCH="| awk -F '=' '{ print $2 }'| sed -e 's#^origin/##'| sed -e 's/ *//g')
[[ "${MERGE_BASE_BRANCH}" == "" ]] && echo "MERGE_BASE_BRANCH empty. Bye" && exit 1
MERGE_BASE_BRANCH=origin/${MERGE_BASE_BRANCH}
MERGE_BASE_HASH=$(git rev-parse --short "$(git merge-base ${MERGE_BASE_BRANCH} HEAD)")
PR_NO=$(echo "${MERGE_BASE_INFO}"| grep "PR_NO="| awk -F '=' '{ print $2 }')

GIT_LOG_CMD="git --no-pager log ${MERGE_BASE_HASH}...HEAD --oneline --abbrev-commit --date=format-local:'%Y/%m/%d %H:%M'"
GIT_LOG_1_CMD="${GIT_LOG_CMD} -1 --pretty=format:'%h %cd %an %s'"
GIT_LOG_3_CMD="${GIT_LOG_CMD} -3 --pretty=format:' %C($(git config --get color.diff.commit))%h%Creset %cd %C(187 17)%an%Creset %s' --full-history --simplify-merges --color=always"
GIT_DIFF_STAT_CMD="git diff ${MERGE_BASE_HASH} --stat-graph-width=$(( $(tput cols) / 1 )) --color=always"
COMMANDS=$(cat << EOF
1, edit (neovim)     - 	git_diff_fzf "${MERGE_BASE_BRANCH}"
2, git log           - 	git_log_fzf  "${MERGE_BASE_BRANCH}.."
3, tig               - 	tig          "${MERGE_BASE_BRANCH}.."
4, git diff          - 	git diff     "${MERGE_BASE_BRANCH}..." | nvim -R
5, git diff(compact) - 	git diff     "${MERGE_BASE_BRANCH}..." --unified=0| nvim -R
6, pull git branch   - 	set -x; git fetch origin --prune; git merge --ff; set +x; read
7, open pull request - 	open https://github.com/$(git_reponame_get)/pull/${PR_NO}
8, show pull request - 	git_pr_fzf "${CURRENT_BRANCH}"
EOF
)

while true; do clear
  _echo_label "[merge_base_branch_info]"; echo
  echo -e "${MERGE_BASE_INFO}"| awk -F '=' '{ print " " $1 "=[" $2 "]" }'

  _echo_label "[branches]"
  _echo_info "${MERGE_BASE_BRANCH}<=${CURRENT_BRANCH}"

  _echo_label "[merge-base]"
  _echo_verbose "${GIT_LOG_1_CMD}"
  _echo_info "$(eval ${GIT_LOG_1_CMD})"

  _echo_label "[git log]"
  _echo_verbose " ${GIT_LOG_CMD}"
  _echo_info "$(eval ${GIT_LOG_CMD}| wc -l| tr -d ' ') commits."
  _echo_verbose " ${GIT_LOG_3_CMD}"
  eval "(${GIT_LOG_3_CMD};echo)"| sed -r 's/^/#AWK_DELIMITTER#/'| cat -n| sed -r 's/^ +//'| sed -r 's/\t//g'| awk -F '#AWK_DELIMITTER#' '{ printf "%+2s " , $1 } { print $2 }'

  _echo_label "[git diff --stat]"
  _echo_verbose " ${GIT_DIFF_STAT_CMD}"
  GIT_DIFF_STAT=$(eval "${GIT_DIFF_STAT_CMD}")
  GIT_DIFF_STAT_CNT=$(echo "${GIT_DIFF_STAT}"| tail -n +2| wc -l| tr -d ' ')
  _echo_info "${GIT_DIFF_STAT_CNT} files."
  echo "${GIT_DIFF_STAT}"| sed -r 's/^/#AWK_DELIMITTER#/'| cat -n| sed -r 's/^ +//'| sed -r 's/\t//g'| awk -F '#AWK_DELIMITTER#' '{ printf "%+'${#GIT_DIFF_STAT_CNT}'s " , $1 } { print $2 }'| tac| tail -n +2| tac

  _echo_label "[pwd]";
  _echo_info " $(pwd| sed -e "s#$HOME#~#")"

  # command selector
  ANS=$(echo "${COMMANDS}"| fzf --disabled --info=hidden --height=11 --prompt="COMMAND> " --bind "j:down" --bind "k:up" | awk -F "\t" '{ print $2 }')
  [[ -z ${ANS} ]] && exit || eval ${ANS}
done

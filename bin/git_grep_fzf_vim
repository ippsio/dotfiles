#!/bin/bash

# git_grep_fzf_vim
# git grep earch + fzf filter +  edit with vim .
#ARGS=${1:-.}
#GIT_GREP_CMD="git grep --line-number --color=always --extended-regexp \"${ARGS}\""

SEARCH_WORD=""
PARAMS=""
NO_FZF=false
USE_REGEX=false
while (( $# > 0 )); do
  case $1 in
    -B | -A | -C)
      if [[ -z "$2" ]] || [[ "$2" =~ ^-+ ]]; then
        echo "'${1}' requires an argument." 1>&2
        exit 1
      else
        PARAMS="${PARAMS}$1 $2 "
        shift
      fi
      ;;
    --extended-regex | -E)
      USE_REGEX=true
      ;;
    --no-fzf)
      NO_FZF=true
      ;;
    *)
      SEARCH_WORD="$1"
      PARAMS="${PARAMS}\"$1\" "
      ;;
  esac
  shift
done
# git grep に --nullオプションを付与すると、結果の区切り文字がNULL文字となる。
# git grep に --nullオプションを付与しないと、結果の区切り文字が':'、または'-'となる。
# ファイル名に'-' が含まれる場合、区切り文字も'-'だと処理上面倒くさい。
# そういう理由で区切り文字はNULL文字とする。
# ただし区切り文字がNULL文字のままだとまた色々都合が悪い。
# そのためNULL文字はperlで置換する（タブ文字にする）。
# ファイルとファイルの区切りは '--' となるが、これは検索結果的には邪魔である。
# そのため grep -v で'--' の行を除去する。

# 正規表現を使いたいときはパラメタ -E か --extended-regexp を与えてもうらことにします。
# GIT_GREP_CMD="git grep --null --line-number --color=always --extended-regexp "${PARAMS}"| perl -pe 's/\x0/\t/g'| grep -v '\-\-'"
if ${USE_REGEX}; then
  #GIT_GREP_CMD="git grep --null --line-number --color=always "${PARAMS}"| perl -pe 's/\x0/\t/g'| grep -v '\-\-'"
  GIT_GREP_CMD="git grep --null --line-number --color=always "${PARAMS}"| perl -pe 's/\x0/\t/g'"
else
  #GIT_GREP_CMD="git grep --null --line-number --color=always --fixed-strings "${PARAMS}"| perl -pe 's/\x0/\t/g'| grep -v '\-\-'"
  GIT_GREP_CMD="git grep --null --line-number --color=always --fixed-strings "${PARAMS}"| perl -pe 's/\x0/\t/g'"
fi
FZF_PROMPT="$(basename $0) ${PARAMS}"
FZF_HEADER="enter:nvim"
GIT_GREP_RESULT=$(eval "${GIT_GREP_CMD}")
GIT_GREP_EXIT_CD=$?
if [[ "${GIT_GREP_EXIT_CD}" != 0 ]]; then
  echo "Not found"
  exit ${GIT_GREP_EXIT_CD}
else
  GIT_GREP_RESULT_WITH_INDEX=$(echo "${GIT_GREP_RESULT}"\
    | awk -v GREP_RESULT_COUNT="$(echo "${GIT_GREP_RESULT}"| wc -l| tr -d ' ')" '{ printf "(%3d/%d)	%s\n", NR, GREP_RESULT_COUNT, $0 }')

  if ${NO_FZF}; then
    echo "${GIT_GREP_RESULT_WITH_INDEX}"
    exit 0
  else
    FZF_REZULT=$(echo "${GIT_GREP_RESULT_WITH_INDEX}" \
      | fzf -m \
        --ansi \
        --info=inline \
        --delimiter='	' \
        --tabstop=2 \
        --prompt="${FZF_PROMPT} > " \
        --header="${GIT_GREP_CMD}" \
        --bind "ctrl-c:print-query" \
        --bind "ctrl-f:page-down" \
        --bind "ctrl-b:page-up" \
        --bind "ctrl-/:toggle-preview" \
        --bind "tab:execute(git_pr_show_by_file_line {2} {3})" \
        --bind "ctrl-o:execute(git_pr_open_by_file_line {2} {3})" \
        --bind "ctrl-p:execute(git_pr_open_by_file_line {2} {3})" \
        --bind="enter:execute(nvim {2} +{3} < /dev/tty > /dev/tty)" \
        --preview-window"=wrap:bottom:65%"\
        --preview="git_blame_colored {2} {3} \"${SEARCH_WORD}\" {q}"
      )

    if [[ ! -z "${FZF_REZULT}" ]]; then
      echo "QUERY> ${FZF_REZULT}"
    fi
  fi
fi


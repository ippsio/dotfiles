[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/neomru.vim'

[[plugins]]
repo = 'Shougo/Unite.vim'
depends = ['Shougo/neomru.vim']

# 補完
[[plugins]]
repo = 'Shougo/deoplete.nvim'
on_event = 'InsertEnter'
hook_add = '''
  let g:deoplete#enable_at_startup = 1
  inoremap <expr><Tab> pumvisible() ? "\<DOWN>" : "\<Tab>"
  inoremap <expr><S-Tab> pumvisible() ? "\<UP>" : "\<S-Tab>"
'''

[[plugins]]
repo = 'Shougo/context_filetype.vim'

# 終了タグ等の自動補完
[[plugins]]
repo = 'tpope/vim-endwise'

# 文字をシングルクォートとか（）で囲む
[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'easymotion/vim-easymotion'
hook_add = '''
  "" <Leader>f{char} to move to {char}
  "map  <Leader>f <Plug>(easymotion-bd-f)
  "nmap <Leader>f <Plug>(easymotion-overwin-f)

  "" s{char}{char} to move to {char}{char}
  "nmap e <Plug>(easymotion-overwin-f2)
  "vmap e <Plug>(easymotion-bd-f2)

  "" Move to line
  "map <Leader>L <Plug>(easymotion-bd-jk)
  "nmap <Leader>L <Plug>(easymotion-overwin-line)

  " Move to word
  map  <Leader>w <Plug>(easymotion-bd-w)
  nmap <Leader>w <Plug>(easymotion-overwin-w)

  let g:EasyMotion_do_mapping = 0
'''

[[plugins]]
repo = 'vim-scripts/taglist.vim'
hook_add = '''
  set tags+=.tags;~/
  "let g:Tlist_Auto_Open = 1
  "let g:Tlist_File_Fold_Auto_Close = 1
  let g:Tlist_Exit_OnlyWindow = 1
  "let g:Tlist_Show_One_File = 1
  let g:Tlist_Use_SingleClick = 1
  let g:Tlist_Highlight_Tag_On_BufEnter = 1
  let g:Tlist_Use_Right_Window = 1
  let g:Tlist_Exit_OnlyWindow = 1
  map <silent> <leader>l :TlistToggle<CR>
'''

# statusline
[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
  if !has('gui_running')
    set t_Co=256
  endif

  set laststatus=2
  let g:lightline = {
    \ 'colorscheme': 'nord',
    \ 'active': {'left': [['mode', 'paste'], ['readonly', 'filename', 'modified', 'anzu']]},
    \ 'component_function': {'anzu': 'anzu#search_status'}}
'''

# [[plugins]]
# repo = 'vim-airline/vim-airline-themes'
# hook_add = '''
#   " let g:airline_theme = 'molokai'
#   " let g:airline_theme = 'alduin'
#   " let g:airline_theme = 'angr'
#   " let g:airline_theme = 'atomic'
#   " let g:airline_theme = 'aurora'
#   " let g:airline_theme = 'ayu_light'
#   " let g:airline_theme = 'ayu_mirage'
#   " let g:airline_theme = 'ayu_dark'
#   " let g:airline_theme = 'badcat'
#   " let g:airline_theme = 'badwolf'
#   " let g:airline_theme = 'base16 (|airline-theme-base16|)'
#   " let g:airline_theme = 'base16_vim (|airline-theme-base16_vim|)'
#   " let g:airline_theme = 'base16_shell (|airline-theme-base16_shell|)'
#   " let g:airline_theme = 'base16_3024'
#   " let g:airline_theme = 'base16_adwaita'
#   " let g:airline_theme = 'base16_apathy'
#   " let g:airline_theme = 'base16_ashes'
#   " let g:airline_theme = 'base16_atelierdune'
#   " let g:airline_theme = 'base16_atelierforest'
#   " let g:airline_theme = 'base16_atelierheath'
#   " let g:airline_theme = 'base16_atelierlakeside'
#   " let g:airline_theme = 'base16_atelierseaside'
#   " let g:airline_theme = 'base16_bespin'
#   " let g:airline_theme = 'base16_brewer'
#   " let g:airline_theme = 'base16_bright'
#   " let g:airline_theme = 'base16_chalk'
#   " let g:airline_theme = 'base16_classic'
#   " let g:airline_theme = 'base16_codeschool'
#   " let g:airline_theme = 'base16_colors'
#   " let g:airline_theme = 'base16_default'
#   " let g:airline_theme = 'base16_eighties'
#   " let g:airline_theme = 'base16_embers'
#   " let g:airline_theme = 'base16_flat'
#   " let g:airline_theme = 'base16_google'
#   " let g:airline_theme = 'base16_grayscale'
#   " let g:airline_theme = 'base16_greenscreen'
#   " let g:airline_theme = 'base16_harmonic16'
#   " let g:airline_theme = 'base16_hopscotch'
#   " let g:airline_theme = 'base16_isotope'
#   " let g:airline_theme = 'base16_londontube'
#   " let g:airline_theme = 'base16_marrakesh'
#   " let g:airline_theme = 'base16_mocha'
#   " let g:airline_theme = 'base16_monokai'
#   " let g:airline_theme = 'base16_nord'
#   " let g:airline_theme = 'base16_ocean'
#   " let g:airline_theme = 'base16_oceanicnext'
#   " let g:airline_theme = 'base16_paraiso'
#   " let g:airline_theme = 'base16_pop'
#   " let g:airline_theme = 'base16_railscasts'
#   " let g:airline_theme = 'base16_seti'
#   " let g:airline_theme = 'base16_shapeshifter'
#   " let g:airline_theme = 'base16_solarized'
#   " let g:airline_theme = 'base16_spacemacs'
#   " let g:airline_theme = 'base16_summerfruit'
#   " let g:airline_theme = 'base16_tomorrow'
#   " let g:airline_theme = 'base16_twilight'
#   " let g:airline_theme = 'base16_vim'
#   " let g:airline_theme = 'base16color'
#   " let g:airline_theme = 'behelit'
#   " let g:airline_theme = 'biogoo'
#   " let g:airline_theme = 'bubblegum'
#   " let g:airline_theme = 'cobalt2'
#   " let g:airline_theme = 'cool'
#   " let g:airline_theme = 'dark'
#   " let g:airline_theme = 'dark_minimal'
#   " let g:airline_theme = 'deus'
#   " let g:airline_theme = 'distinguished'
#   " let g:airline_theme = 'dracula'
#   " let g:airline_theme = 'durant'
#   " let g:airline_theme = 'faryfloss'
#   " let g:airline_theme = 'hybrid'
#   " let g:airline_theme = 'hybridline'
#   " let g:airline_theme = 'jay'
#   " let g:airline_theme = 'jellybeans'
#   " let g:airline_theme = 'jet'
#   " let g:airline_theme = 'kalisi'
#   " let g:airline_theme = 'kolor'
#   " let g:airline_theme = 'laederon'
#   " let g:airline_theme = 'light'
#   " let g:airline_theme = 'lucius'
#   " let g:airline_theme = 'luna'
#   " let g:airline_theme = 'minimalist (|airline-theme-minimalist|)'
#   " let g:airline_theme = 'molokai'
#   " let g:airline_theme = 'monochrome'
#   " let g:airline_theme = 'murmur'
#   " let g:airline_theme = 'night_owl'
#   " let g:airline_theme = 'onedark (|airline-theme-onedark|)'
#   " let g:airline_theme = 'ouo'
#   " let g:airline_theme = 'papercolor'
#   " let g:airline_theme = 'peaksea'
#   " let g:airline_theme = 'powerlineish'
#   " let g:airline_theme = 'qwq'
#   " let g:airline_theme = 'raven'
#   " let g:airline_theme = 'ravenpower'
#   " let g:airline_theme = 'seagull'
#   " let g:airline_theme = 'serene'
#   " let g:airline_theme = 'sierra'
#   " let g:airline_theme = 'silver'
#   " let g:airline_theme = 'simple'
#   " let g:airline_theme = 'soda'
#   " let g:airline_theme = 'sol'
#   " let g:airline_theme = 'solarized (|airline-theme-solarized|)'
#   " let g:airline_theme = 'solarized_flood'
#   " let g:airline_theme = 'term'
#   " let g:airline_theme = 'term_light'
#   " let g:airline_theme = 'tomorrow'
#   " let g:airline_theme = 'ubaryd'
#   " let g:airline_theme = 'understated'
#   " let g:airline_theme = 'vice'
#   " let g:airline_theme = 'violet'
#   " let g:airline_theme = 'wombat'
#   " let g:airline_theme = 'xtermlight'
#   " let g:airline_theme = 'zenburn'
# '''
# 
# [[plugins]]
# repo = 'vim-airline/vim-airline'
# hook_add = '''
#   " どうも省略された表記に慣れないのでコメントアウト
#   "let g:airline_mode_map = {
#   "  \ '__' : '-',
#   "  \ 'n'  : 'N',
#   "  \ 'i'  : 'I',
#   "  \ 'R'  : 'R',
#   "  \ 'c'  : 'C',
#   "  \ 'v'  : 'V',
#   "  \ 'V'  : 'V',
#   "  \ ''  : 'V',
#   "  \ 's'  : 'S',
#   "  \ 'S'  : 'S',
#   "  \ ''  : 'S',
#   "  \ }
# 
#   "let g:airline_powerline_fonts = 1
#   "let g:airline#extensions#tabline#enabled = 1
#   let g:airline_section_z = airline#section#create(['windowswap', '%3p%% ', 'linenr', ':%3v'])
#   "let g:airline#extensions#virtualenv#enabled = 1
#   "let g:airline#extensions#hunks#enabled = 0
#   "let g:airline#extensions#ale#enabled = 1
#   "let g:airline#extensions#ale#error_symbol = 'E:'
#   "let g:airline#extensions#ale#warning_symbol = 'W:'
# '''

# インデントを可視化
[[plugins]]
repo = 'Yggdroot/indentLine'

# 無駄な空白をハイライト
[[plugins]]
repo = 'bronson/vim-trailing-whitespace'

# /検索強化
[[plugins]]
repo = 'osyo-manga/vim-anzu'
hook_add = '''
  nmap n nzz<Plug>(anzu-update-search-status)
  nmap N Nzz<Plug>(anzu-update-search-status)
  nmap * <Plug>(anzu-star)
  nmap # <Plug>(anzu-sharp)
  nmap <silent> <ESC> :<C-u>nohlsearch<CR><Plug>(anzu-clear-search-status)
'''

# f検索強化
[[plugins]]
repo = 'rhysd/clever-f.vim'

[[plugins]]
repo = 'fholgado/minibufexpl.vim'
hook_add = '''
  " 画面上部に最低2行で表示
  "let g:miniBufExplMinSize = 2

  " 画面横に表示
  let g:miniBufExplBRSplit = 1  " 右
  "let g:miniBufExplBRSplit = 0  " 左
  let g:miniBufExplVSplit = 30

  let g:miniBufExplorerMoreThanOne = 1
  set background=dark

  let g:miniBufExplorerAutoStart = 0

  " MiniBufExpl Colors
  hi MBENormal               guifg=fg      guibg=fg
  hi MBEVisibleNormal        guifg=fg      guibg=#000088
  hi MBEVisibleActiveNormal  guifg=fg      guibg=#cc2222
  hi MBEChanged              guifg=#ff0000 guibg=fg
  hi MBEVisibleChanged       guifg=#ff0000 guibg=#000088
  hi MBEVisibleActiveChanged guifg=#ff0000 guibg=#cc2222
  let g:did_minibufexplorer_syntax_inits = 1

  nnoremap <silent> <leader>m :MBEToggle<CR>
'''

# NERDTree
[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
  " vim起動時のフォーカス移動
  function s:MoveToFileAtStart()
    " NERDTreeを起動された時、ちゃんと編集側のウインドウ(NERDTreeじゃない方のウインドウ）にフォーカスを当てる
    call feedkeys("\<C-w>l")
  endfunction

  " vim起動時にNERDTreeを起動
  " さらにカーソルをちゃんとファイルの側のウインドウに移動
  autocmd VimEnter *  NERDTree | call s:MoveToFileAtStart()

  " NERDTree起動時、ブックマーク開く
  let g:NERDTreeShowBookmarks=1

  "他のバッファをすべて閉じた時にNERDTreeが開いていたらNERDTreeも一緒に閉じる。
  autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
  autocmd StdinReadPre * let s:std_in=1
  "autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

  " \の後Nでトグル（閉じてたNERDTreeを開く、開いてたNERDTreeを閉じる）
  map <silent> <leader>n :NERDTreeToggle<CR>

  " 隠しファイルの表示
  let g:NERDTreeShowHidden = 1

  " 横幅
  let g:NERDTreeWinSize = 45

  " NERDTress File highlighting
  function! NERDTreeHighlightFile(extension, fg, bg, guifg, guibg)
    exec 'autocmd filetype nerdtree highlight ' . a:extension .' ctermbg='. a:bg .' ctermfg='. a:fg .' guibg='. a:guibg .' guifg='. a:guifg
    exec 'autocmd filetype nerdtree syn match ' . a:extension .' #^\s\+.*'. a:extension .'$#'
  endfunction
  call NERDTreeHighlightFile('py',     'yellow',  'none', 'yellow',  '#151515')
  call NERDTreeHighlightFile('md',     'blue',    'none', '#3366FF', '#151515')
  call NERDTreeHighlightFile('yml',    'yellow',  'none', 'yellow',  '#151515')
  call NERDTreeHighlightFile('vim',    'yellow',  'none', 'yellow',  '#151515')
  call NERDTreeHighlightFile('config', 'yellow',  'none', 'yellow',  '#151515')
  call NERDTreeHighlightFile('conf',   'yellow',  'none', 'yellow',  '#151515')
  call NERDTreeHighlightFile('json',   'yellow',  'none', 'yellow',  '#151515')
  call NERDTreeHighlightFile('html',   'yellow',  'none', 'yellow',  '#151515')
  call NERDTreeHighlightFile('styl',   'cyan',    'none', 'cyan',    '#151515')
  call NERDTreeHighlightFile('css',    'cyan',    'none', 'cyan',    '#151515')
  call NERDTreeHighlightFile('rb',     'Red',     'none', 'red',     '#151515')
  call NERDTreeHighlightFile('js',     'Red',     'none', '#ffa500', '#151515')
  call NERDTreeHighlightFile('php',    'Magenta', 'none', '#ff00ff', '#151515')
'''

[[plugins]]
repo = 'Xuyuanp/nerdtree-git-plugin'
hook_add = '''
  " let g:NERDTreeIndicatorMapCustom = {
  "     \ "Modified"  : "✹",
  "     \ "Staged"    : "✚",
  "     \ "Untracked" : "✭",
  "     \ "Renamed"   : "➜",
  "     \ "Unmerged"  : "═",
  "     \ "Deleted"   : "✖",
  "     \ "Dirty"     : "✗",
  "     \ "Clean"     : "✔︎",
  "     \ "Unknown"   : "?"
  "     \ }
'''

[[plugins]]
repo = 'ctrlpvim/ctrlp.vim'
depends = ['rking/ag.vim']
hook_add = '''
if executable('ag')
  let g:ctrlp_use_caching=0
  let g:ctrlp_user_command='ag %s -i --nocolor --nogroup -g ""'
endif
'''

[[plugins]]
repo = 'rking/ag.vim'

[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
  set signcolumn=yes
'''

[[plugins]]
repo = 'tpope/vim-fugitive'
hook_add = '''
  nnoremap <silent> <leader>a :Gblame<CR>
  "nnoremap <command> :gblame<CR> :Gblame<CR>
'''

[[plugins]]
repo = 'kana/vim-submode'
hook_add = '''
  " - submode#enter_with:
  "     Define a key mapping to enter the {submode} from {modes}.
  "     If {rhs} is given, it will be executed whenever entering the {submode} by {lhs}.
  "
  "  - 1: submode name
  "  - 2: mode (n:normal, i:insert, ni:normal & insert), ...
  "  - 3: map option (b:<buffer>, e:<expr>)
  "  - 4: {lhs} of map
  "  - 5: {rhs} of map
  "
  " - submode#map:
  "     Define a key mapping ({lhs} to {rhs}) in the {submode} in {modes}.
  "
  "  - 1: submode name
  "  - 2: mode (n:normal, i:insert, ni:normal & insert), ...
  "  - 3: map option (b:<buffer>, e:<expr>)
  "  - 4: {lhs} of map
  "  - 5: {rhs} of map

  " my window mode
  " ウインドウの幅変更
  call submode#enter_with('window_mode', 'n', '', '<C-w>'.'<', '<C-w>5'.'<')
  call submode#map(       'window_mode', 'n', '',         '<', '<C-w>5'.'<')
  call submode#enter_with('window_mode', 'n', '', '<C-w>'.'>', '<C-w>5'.'>')
  call submode#map(       'window_mode', 'n', '',         '>', '<C-w>5'.'>')

  " ウインドウの高さ変更
  call submode#enter_with('window_mode', 'n', '', '<C-w>'.'-', '<C-w>5'.'-')
  call submode#map(       'window_mode', 'n', '',         '-', '<C-w>5'.'-')
  call submode#enter_with('window_mode', 'n', '', '<C-w>'.'-', '<C-w>5'.'+')
  call submode#map(       'window_mode', 'n', '',         '-', '<C-w>5'.'+')

  " ウインドウの高さ統一
  call submode#enter_with('window_mode', 'n', '', '<C-w>'.'=', '<C-w>'.'=')
  call submode#map(       'window_mode', 'n', '',         '=', '<C-w>'.'=')
'''

[[plugins]]
repo = 'fuenor/qfixhowm'
hook_add = '''
  " QFixHowm

  "QFixHowmキーマップ
  let g:QFixHowm_Key = 'g'

  "howm_dirはファイルを保存したいディレクトリを設定。
  let g:howm_dir             = '~/.memos'
  let g:howm_filename        = '%Y/%m/%Y-%m-%d-%H%M%S.howm'
  let g:howm_fileencoding    = 'utf-8'
  let g:howm_fileformat      = 'unix'

  let g:QFixHowm_DiaryFile = 'diary/%Y/%m/%Y-%m-%d-000000.howm'
'''

# vimは大文字始まりのユーザ定義コマンドしか許容しないが、小文字始まりの方が指が楽なので、
# エイリアスをvim-altercmdでエイリアスを作り、小文字始まりのユーザ定義コマンドを実現できるようにする。
#
# * ユーザ定義コマンドとは、コロンで始まるコマンド
#   - rking/agなら :Ag とか
#   - scrooloose/nerdtree なら :NERDTreeFindとか :NERDTreeToggleとか
[[plugins]]
repo = 'tyru/vim-altercmd'
hook_add = '''
  call altercmd#load()
  AlterCommand ntf NERDTreeFind
  AlterCommand ag Ag
'''


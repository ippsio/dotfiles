[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/Unite.vim'

# 補完

[[plugins]]
repo = 'Shougo/deoplete.nvim'

# 終了タグ等の自動補完
[[plugins]]
repo = 'tpope/vim-endwise'

[[plugins]]
repo = 'Shougo/neocomplcache.vim'
hook_add = '''
  " Disable AutoComplPop.
  let g:acp_enableAtStartup = 0

  " Use neocomplcache.
  let g:neocomplcache_enable_at_startup = 1

  " Use smartcase.
  let g:neocomplcache_enable_smart_case = 1

  " Set minimum syntax keyword length.
  let g:neocomplcache_min_syntax_length = 3
  let g:neocomplcache_lock_buffer_name_pattern = '\*ku\*'

  let g:neocomplcache_enable_camel_case_completion = 1
  let g:neocomplcache_enable_underbar_completion = 1

  " 補完候補表示時、先頭1件を選択状態にする
  let g:neocomplcache_enable_auto_select = 1
'''

[[plugins]]
repo = 'vim-scripts/taglist.vim'
hook_add = '''
  set tags+=.tags;~/
  let g:Tlist_Auto_Open = 1
  "let g:Tlist_File_Fold_Auto_Close = 1
  let g:Tlist_Exit_OnlyWindow = 1
  let g:Tlist_Show_One_File = 1
  let g:Tlist_Use_SingleClick = 1
  let g:Tlist_Highlight_Tag_On_BufEnter = 1
  let g:Tlist_Use_Right_Window = 1
  let g:Tlist_Exit_OnlyWindow = 1
  map <silent> <leader>l :TlistToggle<CR>
'''

#[[plugins]]
#repo = 'Shougo/context_filetype.vim'

## statusline
#[[plugins]]
#repo = 'itchyny/lightline.vim'
#hook_add = '''
#  if !has('gui_running')
#    set t_Co=256
#  endif
#
#  set laststatus=2
#  let g:lightline = {
#    \ 'colorscheme': 'nord',
#    \ 'active': {
#    \   'left': [
#    \     ['mode', 'paste'],
#    \     ['readonly', 'filename', 'modified', 'anzu']
#a    \   ]
#    \ },
#    \ 'component_function': {
#    \   'anzu': 'anzu#search_status'
#    \ }
#    \ }
#'''

[[plugins]]
repo = 'vim-airline/vim-airline-themes'

[[plugins]]
repo = 'vim-airline/vim-airline'
hook_add = '''
  let g:airline_mode_map = {
    \ '__' : '-',
    \ 'n'  : 'N',
    \ 'i'  : 'I',
    \ 'R'  : 'R',
    \ 'c'  : 'C',
    \ 'v'  : 'V',
    \ 'V'  : 'V',
    \ ''  : 'V',
    \ 's'  : 'S',
    \ 'S'  : 'S',
    \ ''  : 'S',
    \ }

  "let g:airline_powerline_fonts = 1
  "let g:airline_theme = 'wombat'
  "let g:airline#extensions#tabline#enabled = 1
  let g:airline_section_z = airline#section#create(['windowswap', '%3p%% ', 'linenr', ':%3v'])
  "let g:airline#extensions#virtualenv#enabled = 1
  "let g:airline#extensions#hunks#enabled = 0
  "let g:airline#extensions#ale#enabled = 1
  "let g:airline#extensions#ale#error_symbol = 'E:'
  "let g:airline#extensions#ale#warning_symbol = 'W:'
'''

# インデントを可視化
[[plugins]]
repo = 'Yggdroot/indentLine'

# 無駄な空白をハイライト
[[plugins]]
repo = 'bronson/vim-trailing-whitespace'

# /検索強化
[[plugins]]
repo = 'osyo-manga/vim-anzu'
hook_add = '''
  nmap n nzz<Plug>(anzu-update-search-status)
  nmap N Nzz<Plug>(anzu-update-search-status)
  nmap * <Plug>(anzu-star)
  nmap # <Plug>(anzu-sharp)
  nmap <silent> <ESC><ESC> :<C-u>nohlsearch<CR><Plug>(anzu-clear-search-status)
'''

# f検索強化
[[plugins]]
repo = 'rhysd/clever-f.vim'

[[plugins]]
repo = 'fholgado/minibufexpl.vim'
hook_add = '''
  " 画面上部に最低2行で表示
  "let g:miniBufExplMinSize = 2

  " 画面横に表示
  let g:miniBufExplBRSplit = 1  " 右
  "let g:miniBufExplBRSplit = 0  " 左
  let g:miniBufExplVSplit = 30

  let g:miniBufExplorerMoreThanOne = 1
  set background=dark

  " MiniBufExpl Colors
  hi MBENormal               guifg=fg      guibg=fg
  hi MBEVisibleNormal        guifg=fg      guibg=#000088
  hi MBEVisibleActiveNormal  guifg=fg      guibg=#cc2222
  hi MBEChanged              guifg=#ff0000 guibg=fg
  hi MBEVisibleChanged       guifg=#ff0000 guibg=#000088
  hi MBEVisibleActiveChanged guifg=#ff0000 guibg=#cc2222
  let g:did_minibufexplorer_syntax_inits = 1
'''

# NERDTree
[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
  let g:NERDTreeShowBookmarks=0
  "引数なしでvimを開いたらNERDTreeを起動
  "autocmd vimenter * if !argc() | NERDTree | endif

  " vim起動時にNERDTreeを起動
  autocmd vimenter * NERDTree

  "他のバッファをすべて閉じた時にNERDTreeが開いていたらNERDTreeも一緒に閉じる。
  autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
  autocmd StdinReadPre * let s:std_in=1
  "autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

  " CTRL+Nでトグル（閉じてたNERDTreeを開く、開いてたNERDTreeを閉じる）
  map <C-n> :NERDTreeToggle<CR>

  let g:NERDTreeShowHidden = 1

  let g:NERDTreeWinSize = 45

  " NERDTress File highlighting
  function! NERDTreeHighlightFile(extension, fg, bg, guifg, guibg)
    exec 'autocmd filetype nerdtree highlight ' . a:extension .' ctermbg='. a:bg .' ctermfg='. a:fg .' guibg='. a:guibg .' guifg='. a:guifg
    exec 'autocmd filetype nerdtree syn match ' . a:extension .' #^\s\+.*'. a:extension .'$#'
  endfunction
  call NERDTreeHighlightFile('py',     'yellow',  'none', 'yellow',  '#151515')
  call NERDTreeHighlightFile('md',     'blue',    'none', '#3366FF', '#151515')
  call NERDTreeHighlightFile('yml',    'yellow',  'none', 'yellow',  '#151515')
  call NERDTreeHighlightFile('vim',    'yellow',  'none', 'yellow',  '#151515')
  call NERDTreeHighlightFile('config', 'yellow',  'none', 'yellow',  '#151515')
  call NERDTreeHighlightFile('conf',   'yellow',  'none', 'yellow',  '#151515')
  call NERDTreeHighlightFile('json',   'yellow',  'none', 'yellow',  '#151515')
  call NERDTreeHighlightFile('html',   'yellow',  'none', 'yellow',  '#151515')
  call NERDTreeHighlightFile('styl',   'cyan',    'none', 'cyan',    '#151515')
  call NERDTreeHighlightFile('css',    'cyan',    'none', 'cyan',    '#151515')
  call NERDTreeHighlightFile('rb',     'Red',     'none', 'red',     '#151515')
  call NERDTreeHighlightFile('js',     'Red',     'none', '#ffa500', '#151515')
  call NERDTreeHighlightFile('php',    'Magenta', 'none', '#ff00ff', '#151515')
'''

[[plugins]]
repo = 'ctrlpvim/ctrlp.vim'
depends = ['rking/ag.vim']
hook_add = '''
if executable('ag')
  let g:ctrlp_use_caching=0
  let g:ctrlp_user_command='ag %s -i --nocolor --nogroup -g ""'
  endif
'''

[[plugins]]
repo = 'rking/ag.vim'

[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
  set signcolumn=yes
'''

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'kana/vim-submode'
hook_add = '''
  " - submode#enter_with:
  "     Define a key mapping to enter the {submode} from {modes}.
  "     If {rhs} is given, it will be executed whenever entering the {submode} by {lhs}.
  "
  "  - 1: submode name
  "  - 2: mode (n:normal, i:insert, ni:normal & insert), ...
  "  - 3: map option (b:<buffer>, e:<expr>)
  "  - 4: {lhs} of map
  "  - 5: {rhs} of map
  "
  " - submode#map: 
  "     Define a key mapping ({lhs} to {rhs}) in the {submode} in {modes}.
  "
  "  - 1: submode name
  "  - 2: mode (n:normal, i:insert, ni:normal & insert), ...
  "  - 3: map option (b:<buffer>, e:<expr>)
  "  - 4: {lhs} of map
  "  - 5: {rhs} of map

  " my window mode
  for k in split('<>+-=n', '.\zs')
    call submode#enter_with('window_mode', 'n', '', '<C-w>'.k, '<C-w>5'.k)
    call submode#map(       'window_mode', 'n', '',         k, '<C-w>5'.k)
  endfor
'''

[[plugins]]
repo = 'tpope/vim-surround'

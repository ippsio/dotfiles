# 参考) これらは同じ意味です。
# set = set-option
# setw = set-window-option = set-option -w

set -s escape-time 0

# 番号基準値を変更
set -g base-index 1

## ヴィジュアルノーティフィケーションを有効にする
# ウインドウを切り替えるたびにステータスバー上にActivity in window *** という表示が出るのが煩わしいので、表示されないようにする。
setw -g monitor-activity off
set -g visual-activity off

# [コンソール設定]
# 後方スクロール行数の上限
set -g history-limit 100000

# [プラグイン]
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'tmux-plugins/tmux-cpu'
# set -g @plugin 'tmux-plugins/tmux-copycat'
set -g @plugin 'sainnhe/tmux-fzf'

# tmux-yank
set -g @plugin 'tmux-plugins/tmux-yank'
set -g @yank_action 'copy-pipe' # or 'copy-pipe-and-cancel' for the default
#set -g @yank_action 'copy-pipe-and-cancel' # or 'copy-pipe-and-cancel' for the default

# [tmux-cpu]
# cpu-low
set -g @cpu_low_icon     "="
set -g @cpu_low_fg_color ""
set -g @cpu_low_bg_color "#[bg=colour26]"
# cpu-medium
set -g @cpu_medium_icon     "="
set -g @cpu_medium_fg_color "#[fg=red,bold]"
set -g @cpu_medium_bg_color "#[bg=colour54]"

# cpu-high
set -g @cpu_high_icon     "="
set -g @cpu_high_fg_color "[fg=red,bold]"
set -g @cpu_high_bg_color "#[bg=colour196]"
# cpu-percentage
set -g @cpu_percentage_format "%2.0f%%" # printf format to use to display percentage

# [プレフィックスキー]
set -g prefix C-t

# [色]
set -g default-terminal "screen-256color"

# [ステータスバーの構成]
setw -g automatic-rename on
set -g status-interval 1
set -g status-fg colour10
set -g status-bg colour233
set -g status-position bottom
set -g status-justify left
set -g status-left-length  90
set -g status-right-length 90

# [ステータスバー(左側)]
set -g  status-left                  '#{?pane_mode,#[fg=colour253]#[bg=colour197]  [#{pane_mode}]  ,}#[default]'
set -ga status-left                  '#{?window_zoomed_flag,#[fg=colour255]#[bg=colour168] \zoomed/ #[default],}#[default]'
set -ga status-left                  '#{?client_prefix,#[reverse],} SES[#S/#(~/dotfiles/bin/tmux/tmux_sessions_count)]'
set -ga status-left                  '#{?client_prefix,#[reverse],}, '

# [ステータスバー(ウインドウ。これはstatus-leftの右隣)]
setw -g window-status-format         '#{?client_prefix,#[reverse],}|#W#{?window_zoomed_flag,:zoomed,}#[default]'
setw -g window-status-current-format '#{?client_prefix,#[reverse],}|#[fg=colour255,bg=colour239] #W#{?window_zoomed_flag,:zoomed,}#[default]'

# ステータスバー(右側)
#set -g  status-right                 '#{?client_prefix,#[reverse],}#[bg=colour0] %Y/%m/%d(%a)%H:%M:%S'
set  -g status-right                 '#{?client_prefix,#[reverse],}#[fg=colour255]#[bg=colour0] %m/%d(%a)%H:%M:%S'
set -ga status-right                 '#{?client_prefix,#[reverse],} #[fg=colour255]#{cpu_bg_color}CPU#{cpu_icon}#{cpu_percentage}#[bg=colour0]'
set -ga status-right                 '#{?client_prefix,#[reverse],} #[fg=colour255]#[bg=colour0]#(~/dotfiles/bin/tmux/tmux_battery --tmux)#[bg=black]'
set -ga status-right                 '#{?client_prefix,#[reverse],} #[fg=colour255]#[bg=colour0]#(~/dotfiles/bin/tmux/tmux_wifi)#[default]'
set -ga status-right                 '#{?pane_mode,#[fg=colour253][bg=colour0] [  #{pane_mode} ] ,} #[bg=colour0]'
#set -ga status-right                 "|#h"

# ---------------------
# ペイン
# ---------------------
# Paneの色
set -g pane-border-style '
  'fg='colour233
  'bg='colour240
'

set -g pane-active-border-style '
  'fg='colour223
  'bg='colour31
'

set -g pane-border-status top
set -g pane-border-format "#[bg=colour168,fg=colour255]#{?window_zoomed_flag, /zoomed\\ ,}#[default]_/ WIN-PANE[#I-#P] \\_#{?pane_active,#[bg=red],} #{pane_current_command} #[default]"
set -g pane-border-lines 'simple'

# pane-border-lines type
#   Set the type of characters used for drawing pane borders.	type may be one of:
#   single  single lines using ACS or UTF-8 characters
#   double  double lines using UTF-8 characters
#   heavy   heavy lines using UTF-8 characters
#   simple  simple ASCII characters
#   number  the pane number
#   `double' and `heavy' will fall back to standard ACS line drawing when UTF-8 is not supported.

set -g message-style '
  'fg='colour220
  'bg='colour237
'

# choose-mode での行選択時の色、および copy-mode 時の色
set -wg mode-style '
  'fg='default
  'bg='colour242
'

# ペイン移動 Prefix + 'h','j','k','l'
bind h select-pane -L \; display-panes -d 200
bind j select-pane -D \; display-panes -d 200
bind k select-pane -U \; display-panes -d 200
bind l select-pane -R \; display-panes -d 200
bind q display-panes -d 200

# tmuxのコマンドプロンプト表示
#bind C-t run-shell tmux_pane_next \; display-panes -d 750

# ペイン移動その２ Prefix + 'CTRL-h','CTRL-j','CTRL-k','CTRL-l'でも行けるようにする。たぶんその方が指が楽。
bind -r C-h select-pane -L \; display-panes -d 200
bind -r C-j select-pane -D \; display-panes -d 200
bind -r C-k select-pane -U \; display-panes -d 200
bind -r C-l select-pane -R \; display-panes -d 200

# ペインの移動(ローテート)
bind -n C-left select-pane -L
bind -n C-down select-pane -D
bind -n C-up select-pane -U
bind -n C-right select-pane -R

# ペインリサイズ Prefix + 'H','J','K','L'
bind -r H resize-pane -L 5
bind -r J resize-pane -D 5
bind -r K resize-pane -U 5
bind -r L resize-pane -R 5

# ペインの縦分割 Prefix + '|',または'\'
bind \| split-window -h
bind \\ split-window -h
bind C-\\ split-window -h

# ペインの横分割 Prefix + '-'
bind - split-window -v
# 驚くようなことですが、
# `bind C-_(CTRL+アンダースコア)` と定義すると、
# `bind C--(CTRL+ハイフン)` を定義したような動作を実現できるようです。
# 一方、
# `bind C--(CTRL+ハイフン)` と定義しても、
# この定義の見た目通りの挙動は発生しませんでした。
# `C-t C-ハイフン`のように CTRLキーを押したままペインの横分割をしたいので、この定義をしています。
# `C-t ハイフン` だと結構キー操作を誤り、うまくペインの横分割ができない確率が多かったのです。。
bind C-_ split-window -v

bind = select-layout even-horizontal\; select-layout even-vertical

# ---------------------
# ウインドウ
# ---------------------
#フォーカスしているペインの設定
#setw -g window-active-style 'fg=white,bg=colour0'

#フォーカスしていないペインの設定
#setw -g window-style 'fg=colour242 bg=colour235'
#setw -g window-style 'fg=colour240,bg=colour235'
set -g window-style '
  'fg='colour249
  'bg='colour237
'

set -g window-active-style '
  'fg='colour255
  'bg='colour0
'

# 前、次のウインドウを表示
bind C-n next-window
# 'bind -n' は、プレフィクスキー無しで動作するキーバインド
bind -n Home next-window
bind -n End previous-window

# CTRL-semi-colon でtmuxコマンドプロンプト
#bind -n C-\; command-prompt

# ---------------------
# マウス
# ---------------------
## マウス操作を有効にする
# set -g mouse on
# bind -n WheelUpPane if-shell -F -t = "#{mouse_any_flag}" "send-keys -M" "if -Ft= '#{pane_in_mode}' 'send-keys -M' 'copy-mode -e'"

set -g mouse on
bind -T edit-mode-vi WheelUpPane send-keys -X scroll-up
bind -T edit-mode-vi WheelDownPane send-keys -X scroll-down



# コピーモードでvimキーバインドを使う

# ---------------------
# コピーモード
# ---------------------
# コピーモードへのモード変更 Prefix + '[': コピーモード開始
bind C-[ copy-mode

setw -g mode-keys vi

# 'v' で選択を始める
bind -T copy-mode-vi v send -X begin-selection

# 'V' で行選択
bind -T copy-mode-vi V send -X select-line

# 'C-v' で矩形選択
bind -T copy-mode-vi C-v send -X rectangle-toggle

# 'y' でヤンク
bind -T copy-mode-vi y send -X copy-selection

# 'Y' で行ヤンク
bind -T copy-mode-vi Y send -X copy-line

#  C-[(　コピーモード開始)と間違って暴発ペーストした事があったので、このbindは廃止。
# 'C-p'でペースト
# bind C-p paste-buffer
unbind C-p
unbind p

bind C-c new-window

# choose-tree
# bind w run-shell ~/dotfiles/bin/tmux/tmux_choose_tree
bind w run-shell ~/dotfiles/bin/tmux/tmux_choose_window
bind C-w run-shell ~/dotfiles/bin/tmux/tmux_choose_window

#bind C-z suspend-client
unbind C-z # C-t C-x してもtmuxを閉じないで下さい。という思いを込めてunbindします。
bind C-z resize-pane -Z

# PrefixキーをCTRL+t に設定しているので,
# C-t C-t といった具合にCTRLを押しながらtを2連打することでメニューが表示されると便利なのではないだろうかと
# 思ったのですが、想像していたよりも使い勝手が良くなかったのでコメントアウトします。
#
# # menu
# bind C-t display-menu -x S -y P -T "Menu" \
#   "enter copy-mode"    [   "copy-mode" \
#   "toggle zoom"        z   "resize-pane -Z" \
#   "next pane"          C-t "run-shell ~/dotfiles/bin/tmux/tmux_pane_next \; display-panes -d 750" \
#   "enter clock-mode"   c   "clock-mode" \
#   "choose-window"      w   'run-shell ~/dotfiles/bin/tmux/tmux_choose_window' \
#   "choose-buffer"      b   'choose-buffer' \
#   "list-keys"          ?   'list-keys'\

# かわりに CTRLを押しながらtを2連打した時、コピーモードに入るようにします。
bind C-t copy-mode
bind -n C-t resize-pane -Z

# ===== logging =====
#
# C-b C-p Start logging.
bind-key C-p pipe-pane -o '/bin/sh -c "while read -r LINE; do echo \"[\$(date +\"%%Y_%%m%%d_%%H%%M%%S_%%N\")] \${LINE}\" >> \${HOME}/.tmux/log/\$(date +%Y%m%d-%H%M%S)-#S-#I.#P.log; done "' \; display-message "Logging start."
# C-b C-o Stop logging
#bind-key C-o pipe-pane \; display-message "Logging end."
# C-b v Open new window. Logging always. (-n is set window name.)
# bind-key v new-window -n 'logging...' \; pipe-pane -o '/bin/sh -c "while read -r LINE; do echo \"[\$(date +\"%%Y_%%m%%d_%%H%%M%%S_%%N\")] \${LINE}\" >> \${HOME}/.tmux/log/\$(date +%Y%m%d-%H%M%S)-#S-#I.#P.log; done "'
bind-key v new-window -n 'logging...' \; pipe-pane -o '/bin/sh -c "while read -r LINE; do echo \"[\$(date +\"%%Y_%%m%%d_%%H%%M%%S_%%N\")] \$(echo \"\${LINE}\"| strip_color)\" >> \${HOME}/.tmux/log/\$(date +%Y%m%d-%H%M%S)-#S-#I.#P.log; done "'

# run -b "~/dotfiles/tmux/tmux-cpu/cpu.tmux"

set -g display-panes-time 5000

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run -b "~/.cache/tmux/plugins/tpm/tpm"

